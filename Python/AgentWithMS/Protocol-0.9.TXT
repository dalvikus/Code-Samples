4/24/2008
=========
	김광호 <iccentric@gmail.com>

1. W/C, M/S 그리고 Agent 사이의 통신규약

W/C 은 관리자의 요구에 따라 여러 가지 "명령(Order)"을 M/S 나
또는 M/S 를 통하여 Agent 에 전달한다. 제일 흔한 일은 Job 을 설정하는 것이다.
주어진 "명령"에 대한 "응답"을 명령에 따라 여러 형태가 된다.
역시 제일 많이 하는 일은 설정한 Job 이 수집한 결과를 DB 에서 얻어 보여주는 것이다.
"명령"에 따라 좀 더 간단한 방법을 택할 수도 있다.
예를 들어, Job 을 중지하라고 했을 때 제대로 그렇게 했는 지만을 알면 된다.
디스커버리와 같은 일을 해서 얻을 결과는 데이터 DB 가 아닌,
일종의 임시 장소에서 가져올 경우도 있다.

이와 같은 구조에 필요한 몇 개의 DB 테이블을 정의한다.

OrderTable
----------
ORDER__ID
XXX__ID		-- 이 명령과 관련된 ID 가 어는 것인가
		-- Job 과 관련된 명령이라면 JOB__ID 가 될 것이고,
		-- Script 와 관련된 명령이라면 SCRIPT__ID 가 될 수 있다.
		-- SERVER__ID, BYTE_STREAM__ID 등이 될 수도 있다.
TYPE__ENUM	-- 어떤 유형의 명령인지
		--	ORD_TYPE__ADD_JOB		새로운 Job 을 만들 때
		--	ORD_TYPE__DELETE_JOB		Job 을 삭제할 때
		--	ORD_TYPE__PAUSE_JOB		Job 을 일시 중지할 때
		--	ORD_TYPE__CONTINUE_JOB		중지된 Job 을 다시 시작하게 할 때
		--	ORD_TYPE__UPDATE_JOB_SCHEDULE	Job Schedule 을 갱신할 때
		--	ORD_TYPE__UPDATE_JOB_RULE	Job Rule 을 갱신할 때
		--	ORD_TYPE__DOWNLOAD_SCRIPT	Agent 에서 직.간접적으로 사용할 Script 을 내려보낼 때
		--					의존하는 것을 먼저 내려보내다.
		--	ORD_TYPE__UPDATE_SCRIPT		특정 Script 을 교체할 때
		--	ORD_TYPE__DOWNLOAD_BYTE_STREAM	Job 을 내려보낼 때, 사용하는 모듈을 내려보낼 때
		--	ORD_TYPE__UPDATE_BYTE_STREAM	Worker 의 동작 모듈을 교체할 때
		--	ORD_TYPE__UPDATE_AGENT		Agent 자체를 교체할 때
		--	ORD_TYPE__RESTART_AGENT		Agent 를 다시 시작하게 할 때
		--	ORD_TYPE__DISCOVERY		Agent 에서 정보를 수집할 때
		--	ORD_TYPE__EXEC_COMMAND		특정 명령을 실행할 때
		--	ORD_TYPE__PING_SERVER		서버에서 Agent 의 상황을 파악할 때
		-- *: 다른 유형은 아래의 "명령유형 헤더"를 참고한다.
		-- +: ORD_TYPE__PING_SERVER 는 M/S 에만 전달하는 명령이다.
STATE__ENUM	-- 명령의 현재 상황은 어떤지
		--	ORD_STATE__WC_SENT	W/C 이 명령을 내린 직 후
		--	ORD_STATE__MS_SEND	M/S 가 Agent 에 명령을 내린 직 후
		--	ORD_STATE__ACK		Agent 가 M/S 로부터 명령을 받은 직 후
		--	ORD_STATE__OK		Agent 가 주어진 명령을 성공적으로 끝낸 후
		--	ORD_STATE__FAIL		Agetn 가 주어진 명령을 실행하는 데 실패한 경우
		-- *: 명령의 특성에 따라 ORD_STATE__ACK 상태는 없을 수도 있다.
SPECIALITY	-- 주어진 ORDER__ID 가 특정 목적을 위해서 확보된 것인지를 말해준다.
		-- 아래 주(註)의 ORD_TYPE__HEART_BEAT 가 그 예이다.

명령에 따라 추가 결과를 얻는 것들이 있다.
그런 경우는 명령마다 따로 테이블을 사용한다.
Job 을 내리는 경우가 대표적이다. (JobTable)
Discovery(ORD_TYPE__DISCOVERY) 의 경우도 다음과 같은, 결과를 저장하는 테이블을 만든다.

DiscoveryTable
--------------
ORDER__ID	-- 특정 Order 에 해당하는
RETURN__STR	-- 결과를 저장한다.
		-- 문자열은 특정문자로 구분되어 여러 개의 값을 표현할 수도 있다.

註) 많은 경우, 명령과 응답의 흐름은 W/C -> M/S[ -> Agent] 을 따르나
특정한 경우 위(W/C 또는 M/S)로부터의 직접적인 명령없이 Agent 가 응답을 할 수도 있다.
현재 Job 을 담당하는 Worker 쓰레드가 제대로 동작 중인지 알리는 경우가 그 예이다.
Agent 가 M/S 나 W/C 에 보내는 Heart Beat 을 일반화한 것이다.
이를 위해서 몇 개의 ORDER__ID 는 따로 확보한다. (예를 들어, ORD_TYPE__HEART_BEAT 의 경우
ORDER__ID 는 1로 고정된다.) 각 Worker 쓰레드마다 주기적으로 실행되므로,
이에 관한 설정은 Job 수준이 아닌 Command 수준에서 처리한다.
(CommandTable 테이블에 HEART_BEAT_INTERVAL__INT 필드를 추가한다.)


2. 패킷 정의
기존의 데이터(성능, 장애) 패킷 외에
M/S 와 Agent 사이에 사용되는 통신 패킷("명령(Order)", "응답(Response)")을 정의한다.

기존의 성능/장애바이트 헤더에서는 최하위 두 비트를 사용하지 않았다.
그 두 비트를 이용하여 기존의 데이터 패킷과 통신 패킷을 구별한다.
최하위 두 비트 대신에 최상위 두 비트를 사용한다. (기존의 성능/장애바이트 헤더 수정)

명령패킷과 응답패킷은 다음 구조를 가진다.

	명령패킷:= 명령바이트 헤더 + 명령유형 헤더 + ORDER__ID[ + XXX__ID][ +[압축 크기 +] 인자][ + 추가 인자]
	응답패킷:= 응답바이트 헤더 + 응답상태 헤더 + ORDER__ID[ +[ 압축 크기 +] 결과]

처음 세 부분(명령/응답바이트 헤더, 명령유형/응답상태 헤더 + ORDER__ID)는 반드시 보내고,
명령또는 응답에 따라 나머지 부분이 올 수도 있다. ([..]은 ...부분의 선택적임을 뜻한다.)

*: 성능패킷과 장애패킷에 대한 정의는 CPacket.h 에 나와있다.


성능/장애/명령/응답바이트 헤더
------------------------------

    1 ? ? ? ? ? ? ?
    -
    |
    |
    +-------------- 데이터 비트: 이 비트가 설정되어 있다면
                    이 패킷은 데이터(성능, 장애)와 관련된 것이다.
                    그렇지 않다면 "명령(Order)"이나 "응답(Response)"에 관련된 것이다.

명령바이트 헤더
---------------
    x o 1 1 1 1 1 1
    = = = === = = =
    | | |  |  | | |
    | | |  |  | | |
    | | |  |  | | +---- 압축 비트: NUL 로 끝나는 문자열인 경우, 압축되었는 지를 알려준다.
    | | |  |  | |       바이너리인 경우에는 무조건 압축한다.
    | | |  |  | +------ 바이너리 비트: "인자"가 바이너리인지 NUL 로 끝나는 문자열인지 말해준다.
    | | |  |  +-------- 인자 비트: "인자"("명령" 패킷의 경우)가 있는 지를 알려준다.
    | | |  +----------- XXX__ID 크기 비트: XXX__ID 가 몇 바이트로 표현되는 지를 말해준다.
    | | |               XXX__ID 비트가 설정되었을 때만 유효하다.
    | | +-------------- XXX__ID 비트: XXX__ID 가 있는 지를 말해준다.
    | +---------------- 명령 비트: 이 비트가 설정되었으므로 "명령(Order)" 패킷이다.
    +------------------ 이 비트가 설정되지 않았으므로 "명령(Order)" 패킷이거나 "응답(Response)"패킷이다.

명령유형 헤더
-------------
    1 1 1 1 1 1 1 1
    === ========= =
     |      |     |
     |      |     +---- 추가인자 비트: 추가인자가 있을 때 사용한다.
     |      |           NUL 로 끝나는 문자열이어야 한다. 압축하지 않으므로 짧아야 한다.
     |      |           현재까지는 ORD_TYPE__DOWNLOAD_BYTE_STREAM 에서만 사용한다. (Entry Point)
     |      +---------- ORDER 유형 비트 (최대 2^5 = 32)
     |                                                  XXX__ID 인자    주(註)
     |                  =============================== ======= ====    ======
     |                  ORD_TYPE__ADD_JOB                  x      o     JOB__ID 는 Job 의 정의에 포함되어 있다
     |                  ORD_TYPE__DELETE_JOB               o      x     JOB__ID
     |                  ORD_TYPE__PAUSE_JOB                o      x     JOB__ID
     |                  ORD_TYPE__CONTINUE_JOB             o      x     JOB__ID
     |                  ORD_TYPE__UPDATE_JOB_SCHEDULE      o      o     JOB__ID
     |                  ORD_TYPE__UPDATE_JOB_RULE          o      o     JOB__ID
     |                  ORD_TYPE__DOWNLOAD_SCRIPT          o      o     SCRIPT__ID
     |                  ORD_TYPE__UPDATE_SCRIPT            o      o     SCRIPT__ID
     |                  ORD_TYPE__DOWNLOAD_BYTE_STREAM     o      o     BYTE_STREAM__ID, 바이너리, Entry Point
     |                  ORD_TYPE__UPDATE_BYTE_STREAM       o      o     BYTE_STREAM__ID, 바이너리
     |                  ORD_TYPE__UPDATE_AGENT             o      o     Restart Job?, 바이너리
     |                  ORD_TYPE__RESTART_AGENT            o      x     Restart Job?
     |                  ORD_TYPE__DISCOVERY                o      o     SCRIPT__ID
     |                  ORD_TYPE__EXEC_COMMAND             x      o
     |                  *: ORD_TYPE__DOWNLOAD_BYTE_STREAM 의 경우에만 추가인자(Entry Point)를 사용한다.
     |
     +----------------- ORDER__ID 크기 비트: ORDER__ID 가 몇 바이트로 표시되는 지를 말해준다.

응답바이트 헤더
---------------
    x x 1 1 1 - - -
    = = = = = =====
    | | | | |   |
    | | | | |   +------ 사용하지 않는다.
    | | | | +---------- 압축 비트: NUL 로 끝나는 문자열인 경우, 압축되었는 지를 알려준다.
    | | | |             바이너리인 경우에는 무조건 압축한다.
    | | | |             따라서 바이너리인 경우에는 이 비트를 참조하지 않는다.
    | | | +------------ 바이너리 비트: "결과"가 바이너리인지 NUL 로 끝나는 문자열인지 말해준다.
    | | |               이 비트와 압축비트는 결과 비트가 설정되었을 때만 의미가 있다.
    | | +-------------- 결과 비트: "결과"가 있는 지를 알려준다.
    | +---------------- 명령 비트: 이 비트가 설정되지 않았으므로 "응답(Response)" 패킷이다.
    +------------------ 이 비트가 설정되지 않았으므로 "명령(Order)" 패킷이거나 "응답(Response)"패킷이다.

응답상태 헤더
-------------
    1 1 1 1 1 - - -
    === ===== =====
     |    |     |
     |    |     +------ 사용하지 않는다.
     |    +------------ 응답상태 비트: 응답상태를 말해준다.
     |                  (ORD_STATE__WC_SENT)
     |                  (ORD_STATE__MS_SENT)
     |                  RESP_STATE__ACK (ORD_STATE__ACK)
     |                  RESP_STATE__OK (ORD_STATE__OK)
     |                  RESP_STATE__FAIL (ORD_STATE__FAIL)
     |                  괄호안의 표현은 W/C 이 참고하는 OrderTable 에 저장되는 값이다.
     |                  ORD_STATE__WC_SENT 와 ORD_STATE__MS_SENT 는 OrderTable 에만 사용된다.
     |
     +----------------- ORDER__ID 크기 비트: ORDER__ID 가 몇 바이트로 표시되는 지를 말해준다.


3. 구현(implementation)
M/S 나 Agent 가 사용하는 자료구조를 정의함으로써
어떻게 M/S 나 Agent 가 동작하고 서로 통신할 수 있는 지를 말하겠다.

3.1. Agent 의 동작
Agent 는 여러 쓰레드를 가진다.
각 쓰레드는 각자의 명령(Command)을 실행하며 자료를 수집한다.
수집된 자료를 어떻게 처리할 지를 결정하는 것이 Job 의 몫이다.
하나의 쓰레드가 모은 자료를 여러 개의 Job 이 사용할 수도 있으므로
수집된 자료는 각 Job 에 이용하기 쉬운 형태로 가공될 수도 있다.

	Command = {
		'CommandID': ####,		# 다른 Command 와 구분되는...

		'ByteStreamID__LINK': ####,	# 사용하는 모듈에 대한 ID
		'EntryPoint': '...',		# 쓰레드의 시작함수
		'ArgumentScriptID__LINK': ####,	# 시작함수에서 사용하는 인자(argument) 를 결정하는 Script
						# 동작하는 Agent 마다 명령어가 달라질 수 있으므로,
						# 이를 환경에 맞게 인자를 설정하는 역할을 한다.
						# Script 함수의 리턴값(배열)이 argv 가 된다.
		'ParseScriptID__LINK': ####,	# 수집된 자료를 같은 명령어 안에 있는 Job 들이
						# 참고하기 쉬운 형태로 만들러 주는 Script
						# Command 자료구조의 'hCollection' 이라는 Key 에,
						# Script 의 리턴값을 설정한다.
//		'hCollection': ???,		# 여기에 설정한다.
		'HeartBeatInterval': ####,	# 주기적으로 살아있다는 것을 알린다.

		'hJob': {			# 같은 명령어의 결과를 사용하는 여러 Job 에 대한 구조
			'JobID': ???,
			......
		}
	}

각 Job 은 명령어가 수집한 정보를 언제 이용할 지,
수집된 정보가 어떤 기준을 넘어서면 이벤트를 발생시킨다든 지를 말해주는 사항이 있어야 한다.
또한 각 Job 에 모은 데이터가 어떤 항목에 해당하는 지도 가지고 있어야 한다.
다음은 Job 구조의 예이다.

	Job = {
		'JobID': ####,			# 다른 Job 과 구분되는

		'Schedule': ???,		# 언제 모으고,
		'ReturnScriptID__LINK': ####	# 어떻게 모을 지
		'Argument': ''',		# 각 Task 에 사용할 때 이 값을 참고할 수도 있다.
						# 예를 들어, Oracle 서버의 Session ID
		'Rule': ???,			# 어떤 기준을 넘어서면 이벤트를 발생한다.
		'State': ####,			# 이 Job 의 현재 처리 상태를 나타낸다.
						#	JOB_STATE__RUNNING: 동작 중
						#	JOB_STATE__PAUSED: 명령(Order)에 의해 중지
						#	JOB_STATE__FAILED: 동장 중 문제가 발생하여 중지

		'hTask': {
			'Sextuple0': [
				DataID0,	# 성능값을 이 값으로 맵핑한다.
				EventID0,	# 발생한 이벤트의 맵핑 값이다.
//				PrevData	# 비교를 위해 이전 데이터를 저장할 수도 있다.
			],
			......
		}
	}

따라서 Agent 는 다음과 같은 구조를 사용해서 각 Worker 가 실행하는 명령과
각 명령어가 수집한 데이터를 이용하는 Job 를 관리한다.

	hWorker = {
		'CommandID': {
			'ByteStreamID__LINK': ####,
			'EntryPoint': '...',
			'ArgumentScriptID__LINK': ####,
			'ParseScriptID__LINK': ####,
	//		'hCollection': ???,
			'HeartBeatInterval': ####,

			'hJob': {			# 같은 명령어의 결과를 사용하는 여러 Job 에 대한 구조
				'JobID': {
					'Schedule': ???,
					'ReturnScriptID__LINK': ####
					'Argument': ''',
					'Rule': ???,
					'State': ####,

					'hTask': {
						'Sextuple0': [
							DataID0,
							EventID0,
//							PrevData
						],
						......
					}
				}
				......
			}
		}
		......
	}

이 자료를 통해 어떤 명령이 실행되고 있으면 어떤 Job 들이 있는 지를 알 수 있다.
이 때 어떤 모듈(Byte Stream)과 어떤 Script 를 사용하는 지도 알 수 있다.
위에서 "XXXID__LINKE" 가 그것을 뜻한다.

경우에 따라 교체될 수 있는 "XXXID__LINK"에 대한 관리는
다음 구조를 통해 이루어진다.

	hScript = {
		'ScriptID': <function...>
			# Script 에 대한 Bytecode
			# hAgent 에 있는 Script 를 실행한다는 것은,
			# 여기에 등록된 함수를 호출한다는 것을 뜻한다.
			# 따라서 Script 를 교체한다는 것은,
			# 여기에 등록된 함수를 교체하는 것을 뜻한다.
			# 그러면 hAgent 의 어느 곳에서 같은 Script 을 호출하면
			# 교체된 Script 를 사용할 수 있게 되는 것이다.
		......
	}

	hByteStremID = {
		'ByteStreamID': Pointer to entry point
			# 주어진 ByteStream 의 entry point 를 관리한다.
		......
	}

3.2. M/S 의 동작
각 Agent 가 수집해서 보내온 데이터를 DB 에 저장하는 것이 M/S 의 주된 목적이다.
따라서 독립적인 자료구조를 가질 필요가 없다.
하지만 Agent 와의 통신을 위해 즉 W/C 이 내린 "명령(Order)"를 처리하기 위해서
다음과 같은 간단한 구조를 사용한다.

	hAgent = {
		'AgentID0': {
			'ServerID': ####,	# 어떤 종류의 서버에서 동작 중인지

			'CommandID__LIST': [CommandID0, ...]
						# 어떤 명령 즉 어떤 쓰레드를 실행 중인지
			'ByteStreamID__LIST': [ByteStreamID0, ...]
						# 이 때 어떤 모듈을 사용하고 있는 지
			'ScriptID__LIST': [ScriptID0, ...]
						# 어떤 Script 가 내려갔는 지
		},
		......
	}

3.3. 명령(Order) 구현
많은 명령들의 구현은 패킷의 정의만으로 충분하다.
이 중에서 몇 가지 복잡한 예를 구현한다. (제일 복잡한 것에서부터)

ORD_TYPE__ADD_JOB
-----------------
M/S 는 W/C 이 알려준 Job ID 를 사용하여 JobTable 로부터,
Agent 가 처리하는 Job 에 맞는 다음 구조를 만든다.
(Python 데이터 구조로 된 문자열)

	Job:= {
		'JobID': ####,

		# Job 이 사용하는 명령이 이미 실행 중이라면
		'CommandID__LINK': ####,	# 그에 대한 참조만
		# 그렇지 않다면 명령어의 실행에 필요한
		'Command': {			# Command 에 대한 정보를
			'CommandID': ####,

			'ByteStreamID__LINK': ####,
			'EntryPoint': '...',
			'ArgumentScriptID__LINK': ####,
			'ParseScriptID__LINK': ####,
			'HeartBeatInterval': ####
		},

		'Schedule': {			# 어떤 주기로 실행할 것인지
			......
		},

		'Rule': {			# 이벤트를 발생시키는 기준은 무엇인지
			......
		},

		'ReturnScriptID__LINK': ####,	# 어떻게 성능데이터를 모으고,
						# 어떤 경우에 장애데이터 즉 이벤트를 발생시킬 지를 결정한다.
		'Argument__STR': '...',		# 데이터를 결정하는 Script 에서 사용하는 인자가 있다면

		'hTask': {			# 이러한 Task 들을 한다.
			'Sextuple0': [
				DataID0,	# 성능데이터 값의 맵핑
				EventID0	# 장애데이터 값의 맵핑
			],
			......	
		}
	}

이를 받은 Agent 는 'CommandID__LINK' 또는 'Command' 를 사용하여 hWorker 구조에 추가한다.
위와 같은 복잡한 구조를 C 를 통해 처리하는 것은 귀찮은 작업이다.
위의 구조를 받아 hWorker 구조에 넣는 작업을 하는 Python Script(setPy.py) 에서 하도록 한다.
C 에서는 단지 그 함수(setpy)를 위의 데이터 구조에 해당하는 오브젝트를 인자로 해서 호출하면 된다.

ORD_TYPE__UPDATE_JOB_SCHEDULE
-----------------------------
M/S 는 다음 구조를 만든다.

	Schedule:= {
		......
	}

역시 Python 자료구조로 된 문자열을 만든다.
이를 받은 Agent 는 해당하는 오브젝트를 만든 후, 해당 Job 에 있는 것을 대체한다.

ORD_TYPE__UPDATE_JOB_RULE
-------------------------
Schedule 이라는 구조 대신에 Rule 이라는 구조를 쓴다는 것만 빼고
ORD_TYPE__UPDATE_JOB_SCHEDULE 과 동일하다.

ORD_TYPE__DOWNLOAD_BYTE_STREAM
------------------------------
이를 내려받은 Agent 는 특정 디렉토리에 모듈을 저장한다.
이 때 파일이름(libXxx.so) 제대로 하는 거라든지 실행권한을 설정하는 것을 잊지말아야 한다.
Agent 가 관리하는 hByteStream 에 그 내용을 추가한다.
추가인자인 entry point 로부터 포인터를 얻어 이 값을 추가하는 것이다.

ORD_TYPE__DOWNLOAD_SCRIPT
-------------------------
Agent 는 Script 소스를 bytecode 로 변환한 후, 그에 대한 정보를 hScript 에 넣는다.
