my	$TEXTURE_PATH = "T:/home/icentrik/My Documents/maya/projects/default/";

my	$hAoARIBBoxRef = {
	# [유형 1 ] "Declare"부분 즉 첫 번째 "FrameBegin" 바로 앞에 들어갈 내용이다.
	$ENUM_RIB_BOX__DECLARE__JUST_BEFORE_FIRST_FRAME_BEGIN	=>
		# 단순한 문자열이어야 한다!
		#	1) 여러 줄을 넣고 싶다면 "."을 이용해서 연결한다.
		#	2) 각 줄은 "\r\n"으로 끝나야 한다.

		# 다음이 실제로 들어갈 내용이다.
		# 여러 줄을 넣기 위하여 "."을 사용했음을 강조하기 위해
		# "↓"로 표시된 열에 맞추어서 "."을 넣었다.
		########################################################################↓
		'# RIB Box: Just before first FrameBegin' . "\r\n"			.

		# 렌더링에 사용된 정보를 나타낸다.
		'Option "statistics" "endofframe" [ 0 ]' . "\r\n"			.	# 0, 1, 2, 3
		# Release 13부터 0, 1만 지원하고 자세한 정보는 XML형태로 출력된다.
		# 다음 두 옵션은 "endofframe"값이 1로 설정되었을 때만 의미가 있다.
		'Option "statistics" "filename" [ "filename.txt" ]' . "\r\n"		.	# "", "stdout"
		# "catrib"에서 "xmlfilename"앞에 "string"이 없으면 다음 에러가 발생한다.
		#	A08003 RIBParameterList: Unknown parameter identifier: xmlfilename
		# "catrib"이 "Release 13"을 따라오지 못하는 것 같다. (?)
		'Option "statistics" "string xmlfilename" [ "filename.xml" ]' . "\r\n"		.	# "", "stdout", "usefilename"

		# micropolygon정보를 담은 cache를 디스크에 쓸지 메모리에 쓸지를 말해주는 다음 내용
		'Hider "hidden" "mpcache" [0]' . "\r\n"						# 0: 메모리, 1: 디스크
		########################################################################


		# 성분의 끝을 말해주기 위해 ","를 사용한다.
		,


	# [유형 2 ] 다음 5종류의 "RIB Box" 경우에는
	# 적용될 "ELEMENT"를 지정할 수 있다.
	#
	#	$ENUM_RIB_BOX__FRAME__JUST_BEFORE_DISPLAY
	#	$ENUM_RIB_BOX__FRAME__JUST_BEFORE_WORLD_BEGIN
	#	$ENUM_RIB_BOX__WORLD__JUST_BEFORE_FIRST_LIGHTSOURCE_BLOCK
	#	$ENUM_RIB_BOX__WORLD__JUST_BEFORE_FIRST_GEOMETRIC_PRIMITIVE_BLOCK
	#	$ENUM_RIB_BOX__WORLD__JUST_AFTER_LAST_OBJECT_BLOCK
	#
	# "ELEMENT"란 subframe에 해당하는 말로써,
	# "쉐도우 맵"을 만드는 subframe의 경우에는 해당 "라이트"의 이름이,
	# "렌더링 이미지"를 만드는 subframe의 경우에는 "Image"란 이름이 사용된다.
	# 생략된다면 모든 "ELEMENT"에 적용된다.
	#	0) 어느 부분에 적용되는 지는 이름을 보고 "명확히" 알 수 있다. (있기를 바란다.)
	#	1) 바깥의 "["과 "]"가 반드시 필요하다.
	#	2) 같은 종류에서 "ELEMENT"에 따라 다른 "RIB Box"를 사용하고자 하는 경우에는,
	#	다시 "[", "]"을 사용한다.
	#
	# "ELEMENT"를 지정하는 형식은 다음과 같다.
	#	"a,b,...,-x,-y,..."
	#	1) ","로 구분된 각 문자열은, 적용되는 문자열과 일치하는 지 확인할 때 사용된다.
	#	2) "-"로 시작하는 문자열은, 적용되는 문자열이 일치하는 않는 지 확인할 때 사용된다.
	#	위의 경우에는 "a", "b"와 같은 문자열은 포함되어 있지만
	#	"x", "y"와 같은 문자열이 포함되지 않을 때에만 적용된다.
	#	3) 모든 문자열은 ".*"와 같은 형식을 사용한다. (perl의 regular expression에 사용되는 모든 표현이 가능)
	#	4) 특별한 예로 정확한 문자열을 지정하려면 문자열 시작과 끝에 각각 "^", "$"를 사용한다.
	#	예를 들어, "^a$"라는 형식은 정확히 "a"라는 "ELEMENT"에만 적용된다.
	#	이와 달리 "a"는 "a"라는 문자열이 포함된 "ELEMENT"에 적용된다.

	$ENUM_RIB_BOX__FRAME__JUST_BEFORE_DISPLAY		=> [
		# "ELEMENT"에 따라 서로 다른 두 개의 "RIB Box"가 사용된다.
		#
		# 1. "쉐도우 맵"을 만드는 subframe에 적용된다.
		[
			# 다음 "RIB Box"는...
			########################################################################
			'# RIB Box: Just before "Display" in NOT-Final image pass' . "\r\n",
			########################################################################

			# "Image"라는 "ELEMENT"를 제외한 모든 "ELEMENT" 즉
			# "쉐도우 맵"을 만드는 subframe에 적용된다.
			'.*,-Image'
		],
		#
		# 2. "렌더링 이미지"를 만드는 subframe에 적용된다.
		[
			# 다음 "RIB Box"는...
			'# RIB Box: Just before "Display" in FINAL image pass' . "\r\n",

			# "Image"라는 "ELEMENT" 즉 "렌더링 이미지"를 만드는 subframe에 적용된다.
			'Image'
		],
	],

	$ENUM_RIB_BOX__FRAME__JUST_BEFORE_WORLD_BEGIN				=> [
		# 하나의 "RIB Box"가 있다면 안쪽의 "[", "]"는 생략될 수 있다.

		# 다음 "RIB Box"가...
		########################################################################
		'# RIB Box: Just before "WorldBegin"' . "\r\n"
		########################################################################

		# "ELEMENT"를 적는 부분이 생략되었으므로 모든 "ELEMENT"에 적용된다.
	],

	# 첫 번째 "LightSource" 블럭은 "쉐도우 맵"에서는 존재하지 않는다. (왜?)
	# 오직 "Image"라는 "ELEMENT" 즉 "렌더링 이미지"에서만 의미가 있다.
	# 따라서 "쉐도우 맵"에 해당하는 "ELEMENT"를 지정해도 의미가 없다.
	$ENUM_RIB_BOX__WORLD__JUST_BEFORE_FIRST_LIGHTSOURCE_BLOCK		=> [
		'# RIB Box: Just before FIRST "LightSource" block' . "\r\n"
	],

	$ENUM_RIB_BOX__WORLD__JUST_BEFORE_FIRST_GEOMETRIC_PRIMITIVE_BLOCK	=> [
		'# RIB Box: Just before FIRST geometric primitive block' . "\r\n"
	],

	$ENUM_RIB_BOX__WORLD__JUST_AFTER_LAST_OBJECT_BLOCK			=> [
		'# RIB Box: Just after LAST object block' . "\r\n"
	],


	# [유형 3 ] 다음 5종류의 "RIB Box" 경우에는 "ELEMENT"이외에 "OBJECT"를 지정할 수 있다.
	#
	#	$ENUM_RIB_BOX__LIGHT__JUST_AFTER_ATTRIBUTE
	#		"LightSource" 블럭 안에서 라이트의 이름을 말해주는 "Attribute"바로 후
	#	$ENUM_RIB_BOX__OBJECT__JUST_AFTER_ATTRIBUTE
	#		Geometric primitive 블럭 안에서 오브젝트의 이름을 말해주는 "Attribute" 바로 후
	#	$ENUM_RIB_BOX__OBJECT__JUST_BEFORE_LIGHT_SHADER
	#		"LightSource" 블럭 안에서 light shader 바로 전
	#	$ENUM_RIB_BOX__OBJECT__JUST_BEFORE_SURFACE_SHADER
	#		Geometric primitive 블럭 안에서 surface shader 바로 전
	#	$ENUM_RIB_BOX__OBJECT__JUST_BEFORE_GEOMETRIC_PRIMITIVE
	#		Geometric primitive 블럭 안에서 해당 geometric primitive 정의 바로 전
	#
	# "OBJECT"란 말 그대로 "sphere", "plane", "keyLight"와 같은 오브젝트의 이름이다.
	# 규칙은 [유형 2]와 동일하다.
	# "OBJECT"를 지정하는 형식도 "ELEMENT"의 그것과 동일하다.
	# 단지 "ELEMENT"와 "OBJECT"를 모두 지정하려면 ":"를 사용해서 구분한다.
	# 즉 "ELEMENT:OBJECT"와 같은 형식이다.
	# "ELEMENT"가 생략되면 해당하는 오브젝트가 정의된 모든 "ELEMENT"에 적용된다.
	# "OBJECT"마저 생략되면 모든 "ELEMENT"의 모든 "OBJECT"에 적용된다.

	# "LightSource"와 관련된 부분이므로 "ELEMENT"가 "Image"일 때에만 의미가 있다!
	$ENUM_RIB_BOX__LIGHT__JUST_AFTER_ATTRIBUTE		=> [
		'# RIB Box: Just after Attribute in "LIghtSource" block' . "\r\n"
	],

	$ENUM_RIB_BOX__OBJECT__JUST_AFTER_ATTRIBUTE		=> [
		'# RIB Box: Just after Attribute in geometric primitive block' . "\r\n"
	],

	$ENUM_RIB_BOX__OBJECT__JUST_BEFORE_LIGHT_SHADER	=> [
		'# RIB Box: Just before "Light" shader in "LightSouce" block' . "\r\n"
	],

	$ENUM_RIB_BOX__OBJECT__JUST_BEFORE_SURFACE_SHADER	=> [
		'# RIB Box: Just before "Surface" shader in geometric primitive block' . "\r\n"
	],

	$ENUM_RIB_BOX__OBJECT__JUST_BEFORE_GEOMETRIC_PRIMITIVE	=> [
		'# RIB Box: Just before geometric primitive definition in geometric primitive block' . "\r\n"
	],
};

$HoHChunk{ 'BakeEx1' } = {
	'type'	=> $CHUNK_TYPE__RS | $CHUNK_TYPE__BAKE,
	'rbref'	=> $hAoARIBBoxRef,
	'siref'	=> [
		{
		'type'		=> $SHADER_TYPE__SURFACE,
		'set'		=> [ 'teapot', 'mushroom' ],
		'content'	=> qq|\r
Surface "$TEXTURE_PATH/rmanshader/Delux3"\r
	# 다음 두 값은 "Final Rendering Pass"에서 조절해도 된다.\r
	"float Diffuse_Disable" [ 0 ]			# Diffuse 계산을 하지 않으려면 이 값을 1로 설정한다.\r
	"float SubsurfaceScattering_Disable" [ 0 ]	# Subsurface scattering효과를 안 보려면 이 값을 1로 설정한다.\r
\r
	# 다음 두 값은 "Final Rendering Pass"에서 테스트할 수 있다.\r
	"float SubsurfaceScattering_Intensity"			[ 1 ]		# Intensity\r
	"color SubsurfaceScattering_OutColor"			[ 1 1 1 ]	# Out Color\r
\r
\r
	# 다음 값이 바뀌면 "Bake Pass"부터 다시 해야한다.\r
	"color SubsurfaceScattering_InColor"			[ 1 1 1 ]	# In Color\r
\r
	# 다음 값이 바뀌면 "Bake Pass"부터 다시 해야한다.\r
	"color SubsurfaceScattering_AlbedoColor"		[ .5 .5 .5 ]	# Albedo\r
\r
	# 다음 값이 바꾸면 "Bake Pass"부터 다시 해야 한다.\r
	"float SubsurfaceScattering_ScatterPathLegnth"		[ 1 ]		# Scatter Path Length\r
	"color SubsurfaceScattering_ScatterPathFilterColor"	[ 1 1 1 ]	# Scatter Path Filter\r
|
		},
	],
	# CHUNK_TYPE__SHD와 달리, Light Linking에 관한 정보를 담은 키(llref)가 존재한다.
	# 기본값은 '모든 라이트는 모든 오브젝트에 비춘다'이다.
	'llref'	=> [
		{
			'light set'	=> [ '.*' ],
			'object set'	=> [ '.*' ]
		}
	],
	# CHUNK_TYPE__SHD와 달리, "[...]"이 아니라 "{...}"이다!
	'jcref'	=> {
		# Primary이미지를 얻을 때 사용되는 Render Stats에 관한 정보
		# 여기서 설정되어있는 정보가 있을 때,
		# 그 정보를 참고로 하여 오브젝트를 수정한다.
		# 아무런 정보가 없다면 즉 "[]"라면 모든 오브젝트는 그대로 둔다.
		'primary'	=> [
			{
				'object set'	=> [ 'teapot', 'mushroom' ],
				'Render Stats'	=> $RS__CAST_SHADOW | $RS__RECV_SHADOW | $RS__VISIBILITY | $RS__RT | $RS__SSSC
								# 아래 2.의 RS__XXX들의 '|'를 이용한 조합
								# 단, RS__DELETE의 경우 다른 비트는 무시된다.
			}
		],
		# Secondary이미지에 사용되는 channel에 관한 정보
		# 여기서 설정된 정보에 따라 추가 이미지를 만든다.
		# 추가 이미지를 원하지 않을 때는 "[]"로 설정한다.
		'secondary'	=> {
		}
	}
};

$HoHChunk{ 'BakeEx2' } = {
	'type'	=> $CHUNK_TYPE__RS | $CHUNK_TYPE__BAKE,
	'rbref'	=> $hAoARIBBoxRef,
	'siref'	=> [
		{
		'type'		=> $SHADER_TYPE__SURFACE,
		'set'		=> [ 'teapot', 'mushroom' ],
		'content'	=> qq|\r
Surface "$TEXTURE_PATH/rmanshader/Delux3"\r
	# 다음 두 값은 "Final Rendering Pass"에서 조절해도 된다.\r
	"float Diffuse_Disable" [ 0 ]			# Diffuse 계산을 하지 않으려면 이 값을 1로 설정한다.\r
	"float SubsurfaceScattering_Disable" [ 0 ]	# Subsurface scattering효과를 안 보려면 이 값을 1로 설정한다.\r
\r
	# 다음 두 값은 "Final Rendering Pass"에서 테스트할 수 있다.\r
	"float SubsurfaceScattering_Intensity"			[ 1 ]		# Intensity\r
	"color SubsurfaceScattering_OutColor"			[ 1 1 1 ]	# Out Color\r
\r
\r
	# 다음 값이 바뀌면 "Bake Pass"부터 다시 해야한다.\r
	"color SubsurfaceScattering_InColor"			[ 1 1 1 ]	# In Color\r
\r
	# 다음 값이 바뀌면 "Bake Pass"부터 다시 해야한다.\r
	"color SubsurfaceScattering_AlbedoColor"		[ .5 .5 .5 ]	# Albedo\r
\r
	# 다음 값이 바꾸면 "Bake Pass"부터 다시 해야 한다.\r
	"float SubsurfaceScattering_ScatterPathLegnth"		[ 1 ]		# Scatter Path Length\r
	"color SubsurfaceScattering_ScatterPathFilterColor"	[ 1 1 1 ]	# Scatter Path Filter\r
|
		},
	],
	# CHUNK_TYPE__SHD와 달리, Light Linking에 관한 정보를 담은 키(llref)가 존재한다.
	# 기본값은 '모든 라이트는 모든 오브젝트에 비춘다'이다.
	'llref'	=> [
		{
			'light set'	=> [ '.*' ],
			'object set'	=> [ '.*' ]
		}
	],
	# CHUNK_TYPE__SHD와 달리, "[...]"이 아니라 "{...}"이다!
	'jcref'	=> {
		# Primary이미지를 얻을 때 사용되는 Render Stats에 관한 정보
		# 여기서 설정되어있는 정보가 있을 때,
		# 그 정보를 참고로 하여 오브젝트를 수정한다.
		# 아무런 정보가 없다면 즉 "[]"라면 모든 오브젝트는 그대로 둔다.
		'primary'	=> [
			{
				'object set'	=> [ 'teapot', 'mushroom' ],
				'Render Stats'	=> $RS__CAST_SHADOW | $RS__RECV_SHADOW | $RS__VISIBILITY | $RS__RT | $RS__SSSC
								# 아래 2.의 RS__XXX들의 '|'를 이용한 조합
								# 단, RS__DELETE의 경우 다른 비트는 무시된다.
			}
		],
		# Secondary이미지에 사용되는 channel에 관한 정보
		# 여기서 설정된 정보에 따라 추가 이미지를 만든다.
		# 추가 이미지를 원하지 않을 때는 "[]"로 설정한다.
		'secondary'	=> {
		}
	}
};

1;
