// afterShave_attributeEditor.mel 로부터...
//	string: "AS_proc..." -> "CTSimulationProc..."
//	comment out procedure:
//		global proc	AEafterShaveShapeNodeTemplate(string $node_name):
//		global proc select_all_guides():
//		global proc selectAllGuides(string $afterShaveShapeNode):
// 주어진 (유일한) 파라미터에 대해 editorTemplate 의 -callCustom 을 사용하여 UI 를 만들 때,
// CTSimulationParameterNew/CTSimulationParameterReplace 를 호출하는 데 사용하는 인자를 얻는다;
// typo 방지하거나 코드를 정리하기위하여...
global proc	string[] CTSimulationGetParameterSliderCallArguments(string $key)
{
	string	$args[3];
	// $args[0]: ...New	key type checkbox_attribute	checkbox_label slider_label type min max step default
	// $args[1]: ...Replace	key type checkbox_attribute
	// $args[2]: slider_attribute
	// $args[0] 과 $args[1] 에서 (key, type, checkbox_attribute) 는 항상 같아야 한다;
	// 원래 checkbox_attribute 가 "" 이 아닌 경우도 고려했으나 현재는 항상 "" 이다.

	$args[0] = "CTSimulationParameterNew";
	$args[1] = "CTSimulationParameterReplace";
	int	$type;		// 0:= floatSlider, 1:= intSlider
	string	$common;	// ($key, $type, $checkbox_attribute)
	switch ($key) {
	case "spITS":	// (int)	[10, 1000; 1]	(300)
		$type = 1;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Inverse Time Step\" " + "10 1000 1 240";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "InverseTimeStep";
		break;
	case "spYM":	// (float)	[0, 4: 0.1]	(1.0)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Young Modulus\" " + "0.0 4.0 0.1 1.0";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "YoungModulus";
		break;
	case "spAR":	// (float)	[10.0, 100.0, 1.0]; (* 1.e-4)	(50)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Average Radius\" " + "10.0 100.0 1.0 50";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "fAverageRadius";
		break;
	case "spE":	// (float)	[1.0, 2.0, 0.1]		(1.0)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Ellipticity\" " + "1.0 2.0 0.1 1.0";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "fEllipticity";
		break;
	case "spVD":	// (float)	[0.5, 4.0, 0.1]		(1.3)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Volume Density\" " + "0.5 4.0 0.1 1.3";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "fVolumeDensity";
		break;
	case "spK0":	// (float)	[0.0, 2.0, 0.1]		(0.0)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Helix K0 Step\" " + "0.0 2.0 0.1 0.0";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "fHelixK0STep";
		break;
	case "spK1":	// (float)	[0.0, 10.0, 0.1]	(0.0)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Helix K1 Curvature\" " + "0.0 10.0 0.1 0.0";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "fHelixK1Curvature";
		break;
	case "spK0in":	// (float)	[0.0, 2.0, 0.1]		(0.0)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"inHelixK0STep\" " + "0.0 2.0 0.1 0.0";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "inHelixK0STep";
		break;
	case "spK1in":	// (float)	[0.0, 10.0, 0.1]	(0.0)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"inHelixK1Curvature\" " + "0.0 10.0 0.1 0.0";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "inHelixK1Curvature";
		break;
	case "spLF":	// (float)	[0.1, 4, 0.1]		(1.0)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Length Factor\" " + "0.1 4.0 0.1 1.0";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "fLengthFactor";
		break;
	case "spG":	// (int)	[-10, 10: 1] 	(1)
		$type = 1;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Gravity\" " + "-10 10 1 1";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "GravityParameter";
		break;
	case "spAF":	// (int)	[1, 100: 1]	(10)
		$type = 1;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Air Friction Parameter\" " + "1 100 1 10";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "AirFrictionParameter";
		break;
	case "spDLP":	// (float)	[0.01, 1: 0.01]	(0.30)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Dissipation Lambda Parameter\" " + "0.01 1.00 0.01 0.30";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "DissipationLambdaParameter";
		break;
	case "spDGP":	// (float)	[0.01, 1: 0.01]	(0.10)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Dissipation Gamma Parameter\" " + "0.01 1.00 0.01 0.10";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "DissipationGammaParameter";
		break;
	case "spWR":	// (int)	[-5, 5: 1]	(1)
		$type = 1;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Wind Ratio\" " + "-5 5 1 1";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "WindRatio";
		break;
	case "spWD2D":	// (int)	[0, 360: 1]	(90)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Wind Direction2D (phi; in degree)\" " + "0 360 1 90";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "WindDirection2D";
		break;

	// (int, int)
	case "spWD3D0":	// (int)	[0, 180; 1]	(90)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Wind Direction3D(theta; in degree)\" " + "0 180 1 90";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "WindDirection3D0";
		break;
	case "spWD3D1":	// (int)	[0, 360; 1]	(90)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"Wind Direction3D(phi; in degree)\" " + "0 360 1 90";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "WindDirection3D1";
		break;

	// (float, float)	[0, 1: 0.01]	(0.30, 0.50)
	case "spHBC0":
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"TBC Parameter: ratio\" " + "0.00 1.00 0.01 0.30";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "TBCParameter0";
		break;
	case "spHBC1":
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"TBC Parameter: criticalDepth\" " + "0.00 1.00 0.01 0.50";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "TBCParameter1";
		break;

	case "spHHC":	// (float)	[0, 1: 0.01]	(0.30)
		$type = 0;
		$common = $key + " " + $type + " " + "\"\"";
		$args[0] = $args[0] + " " + $common + " \"\" \"TTC Parameter\" " + "0.00 1.00 0.01 0.30";
		$args[1] = $args[1] + " " + $common;
		$args[2] = "TTCParameter";
		break;
	default:
		error ("|" + $key + "|: Unknown Key");
	}

	//print "----\n";
	//print $args;
	//print "----\n";
	return $args;
}
/*
global proc	AEafterShaveShapeNodeTemplate(string $node_name)
{
	global int	$afterShave__AETemplate_DEBUG;

	// 표시되어야 할 것들을 먼저 말하고...
	editorTemplate -beginScrollLayout;	// All; // {

		// File Cache
		editorTemplate -beginLayout "File Cache" -collapse false;	// {
			editorTemplate -callCustom
				// ...New unique_name label mode
				"AS_AEparameterFileNew fileCacheRead \"Load\" 0"
				// ...Replace unique_name mode
				"AS_AEparameterFileReplace fileCacheRead 0"
				// Attribute
			"FileCacheRead";
			editorTemplate -callCustom
				// ...New unique_name label mode
				"AS_AEparameterFileNew fileCacheWrite \"Save\" 1"
				// ...Replace unique_name mode
				"AS_AEparameterFileReplace fileCacheWrite 1"
				// Attribute
			"FileCacheWrite";
		editorTemplate -endLayout;					// File Cache // }

		editorTemplate -beginLayout "Display" -collapse false;
			editorTemplate -addControl "selectBy";
			editorTemplate -addControl "wakes";
			editorTemplate -addSeparator;
			editorTemplate -label "Interpolation" -addControl "beInterpolated";
		editorTemplate -endLayout;

		editorTemplate -beginLayout "Simulation" -collapse false;	// {
			editorTemplate -label "Strand ID List" -addControl "StrandIdList";

			editorTemplate -addSeparator;

			editorTemplate -label "External File Read Only" -addControl "externalFileReadOnly";
			editorTemplate -addControl "SimulationStatus";
			editorTemplate -addControl "Dynamics";

			editorTemplate -addSeparator;

			editorTemplate -callCustom `AS_getParameterSliderCallArguments("spITS")`;

			editorTemplate -beginLayout "Simulation Parameters" -collapse false;	// {

				editorTemplate -beginLayout "Parameter File" -collapse false;	// {
					editorTemplate -callCustom
						// ...New unique_name label mode
						"AS_AEparameterFileNew parameterFileRead \"Load\" 0"
						// ...Replace unique_name mode
						"AS_AEparameterFileReplace parameterFileRead 0"
						// Attribute
					"ParameterFileRead";
					editorTemplate -callCustom
						// ...New unique_name label mode
						"AS_AEparameterFileNew parameterFileWrite \"Save\" 1"
						// ...Replace unique_name mode
						"AS_AEparameterFileReplace parameterFileWrite 1"
						// Attribute
					"ParameterFileWrite";
				editorTemplate -endLayout;	// Simulation Parameter (FILE); // }

				editorTemplate -beginLayout "Race" -collapse false;	// {
					// (enum)	ShSimParameter::numRaceType	(RACE_ASIAN)
					editorTemplate -addControl "RaceType";
//#if 1	// {
					// (bool)	On/Off (On)
					editorTemplate -addControl "IncludeStiffness";
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spYM")`;
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spAR")`;
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spE")`;
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spVD")`;
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spK0")`;
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spK1")`;
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spK0in")`;
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spK1in")`;
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spLF")`;
//#else
//					editorTemplate -callCustom
//						("AS_parameterNew stiffness \"Include Stiffness\" \"Young Modulus\" 0 0.0 4.0 0.1 1.0 IncludeStiffness")
//						("AS_parameterReplace stiffness 0 IncludeStiffness")
//					"YoungModulus";
//#endif	// }
				editorTemplate -endLayout;	// Race; // }

				editorTemplate -beginLayout "External Forces" -collapse false;	// {
					// (bool)	On/Off	(On)
					editorTemplate -addControl "IncludeGravityAndInertia";
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spG")`;

					// (bool)	On/Off	(On)
					editorTemplate -addControl "IncludeAirFriction";
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spAF")`;

					editorTemplate -beginLayout "Wind" -collapse false;	// {
						// (enum)	ShSimParameter::numWindMode	(NOWIND)
						editorTemplate -addControl "WindMode";
						editorTemplate -callCustom `AS_getParameterSliderCallArguments("spWR")`;
						editorTemplate -addSeparator;
						editorTemplate -callCustom `AS_getParameterSliderCallArguments("spWD2D")`;
						editorTemplate -callCustom `AS_getParameterSliderCallArguments("spWD3D0")`;
						editorTemplate -callCustom `AS_getParameterSliderCallArguments("spWD3D1")`;
					editorTemplate -endLayout;	// Wind; // }
				editorTemplate -endLayout;	// External Force; // }

				editorTemplate -beginLayout "Dissipation" -collapse false;	// {
					// (enum)	ShSimParameter::numDissipationMode	(LAMBDA)
					editorTemplate -addControl "DissipationMode";
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spDLP")`;
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spDGP")`;
				editorTemplate -endLayout;	// Dissipation; // }

				editorTemplate -beginLayout "Collision" -collapse false;	// {
					// (bool)	On/Off	(Off)
					editorTemplate -addControl "IncludeHairBodyOptimalCollision";
					editorTemplate -addSeparator;
					// (bool)	On/Off	(Off)
					editorTemplate -addControl "IncludeHairBodyCollision";
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spHBC0")`;
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spHBC1")`;

					editorTemplate -addSeparator;

					// (bool)	On/Off	(Off)
					editorTemplate -addControl "IncludeHairHairCollision";
					editorTemplate -callCustom `AS_getParameterSliderCallArguments("spHHC")`;
				editorTemplate -endLayout;	// Collision // }
			editorTemplate -endLayout;	// Simulation Parameter; // }
		editorTemplate -endLayout;	// Simulation; // }

		// Create an "Extras" section and also add controls for any
		// attributes we have not explicitly mentioned.
		editorTemplate -addExtraControls;

	editorTemplate -endScrollLayout;	// All; // }

	// 나머지는 표시하지 않도록 한다.
	string	$xArray[] = {
		"WindDirection3D",
		"HBCParameter",

		"caching",
		"nodeState",
		"visibility",
		"intermediateObject",
		"template",
		"ghosting",
		"instObjGroups",
		"useObjectColor",
		"objectColor",
		"drawOverride",
		"lodVisibility",
		"renderInfo",
		"renderLayerInfo",
		"ghostingControl",
		"ghostCustomSteps",
		"ghostPreSteps",
		"ghostPostSteps",
		"ghostStepSize",
		"ghostFrames",
		"ghostRangeStart",
		"ghostRangeEnd",
		"ghostDriver",
		"motionBlur",
		"visibleInReflections",
		"visibleInRefractions",
		"castsShadows",
		"receiveShadows",
		"maxVisibilitySamplesOverride",
		"maxVisibilitySamples",
		"geometryAntialiasingOverride",
		"antialiasingLevel",
		"shadingSamplesOverride",
		"shadingSamples",
		"maxShadingSamples",
		"volumeSamplesOverride",
		"volumeSamples",
		"depthJitter",
		"ignoreSelfShadowing",
		"primaryVisibility",
		"tweak",
		"relativeTweak",
		"compInstObjGroups",
		"controlPoints",
		"weights",
		"uvSet",
		"currentUVSet",
		"displayImmediate",
		"displayColors",
		"displayColorChannel",
		"currentColorSet",
		"colorSet",
		"ignoreHwShader",
		"doubleSided",
		"opposite",
		"smoothShading",
		"boundingBoxScale",
		"featureDisplacement",
		"initialSampleRate",
		"extraSampleRate",
		"textureThreshold",
		"normalThreshold",
		"displayHWEnvironment",
		"collisionOffsetVelocityIncrement",
		"collisionDepthVelocityIncrement",
		"collisionOffsetVelocityMultiplier",
		"collisionDepthVelocityMultiplier",
		"inputSurface",
		"bboxCorner1",
		"bboxCorner2",
		"cachedSurface",
		"guide",
		"numPointsInGuide",
		"seglen",
		"time",
		"worldMeshConnected",
		"hairControlPoints",
		"numHairs",
		"numSamplePointsInHair"
	};
	for ($x in $xArray) {
		editorTemplate -suppress $x;
	}
}
 */


global proc	CTSimulationParameterNew(
	string	$unique_name,
	int	$intSlider,	// slider type
	string	$toggle_attribute_name_only,

	string	$checkboxLabel,
	string	$sliderGrpLabel,
	float	$minValue,
	float	$maxValue,
	float	$stepValue,
	float	$defaultValue,

	string	$value_attribute_name_with_node_name
)
{
	global int	$afterShave__AETemplate_DEBUG;
	if ($afterShave__AETemplate_DEBUG)
		print (
			"hello, world: CTSimulationParameterNew: |" + $unique_name + "|" + ", " +
			"|" + $toggle_attribute_name_only + "|" + ", " +
			"|" + $value_attribute_name_with_node_name + "|" +
			"\n"
		);

	string	$control_name;
	if ($toggle_attribute_name_only == "") {
		$control_name = `rowLayout
			-numberOfColumns 1
			-adjustableColumn 1
			-backgroundColor 0 0 1
			-columnAttach 1 "left" 0	// 0: offset;
							// 이 값이 0 이 아니면 -backgroundColor 를 볼 수 있다.
							// 하지만 다른 Control 과 Alignment 가 맞지 않다.
							// "left": type; "right" 만 아니면 된다.
		("layout_" + $unique_name)`;
	} else {	// AS OF 3/7/09 (EST) NOT USED
		$control_name = `rowLayout
			-numberOfColumns 2
			-adjustableColumn 2
			-columnAlign 1 "left"
		("layout_" + $unique_name)`;
	}
	if ($afterShave__AETemplate_DEBUG)
		print ("layout: \"" + $control_name + "\"");
	if ($toggle_attribute_name_only != "") {	// AS OF 3/7/09 (EST) NOT USED
		$control_name = `checkBox
			-label $checkboxLabel
			-onCommand ("CTSimulationToggle_sliderGrp true " + $unique_name + " " + $intSlider + " " + $toggle_attribute_name_only)
			-offCommand ("CTSimulationToggle_sliderGrp false " + $unique_name + " " + $intSlider + " " + $toggle_attribute_name_only)
		("checkbox_" + $unique_name)`;
		if ($afterShave__AETemplate_DEBUG)
			print ("check_box: \"" + $control_name + "\"");
	}
	string	$change_command = "CTSimulationValue_sliderGrp " + $unique_name + " " + $intSlider + " " + $value_attribute_name_with_node_name;
	if ($intSlider) {
		$control_name = `intSliderGrp
//			-backgroundColor 0 1 0
//			-adjustableColumn 3		// floatSliderGrp 의 경우 오른쪽에 여유가 있는 상태인데 반해서,
							// intSliderGrp 의 경우에는 가득 찬 생태에서 Column 이 변한다.
//			-columnAttach 3 "left" 0
			-label $sliderGrpLabel
			-field true
			-minValue ((int) $minValue)
			-maxValue ((int) $maxValue)
			-step ((int) $stepValue)
			-value ((int) $defaultValue)
			-changeCommand $change_command
		("sliderGrp_" + $unique_name)`;
	} else {
		$control_name = `floatSliderGrp
//			-backgroundColor 0 0 1
//			-adjustableColumn 3
//			-columnAttach 3 "left" 0
			-label $sliderGrpLabel
			-field true
			-minValue $minValue
			-maxValue $maxValue
			-step $stepValue
			-value $defaultValue
			-changeCommand $change_command
		("sliderGrp_" + $unique_name)`;
	}
	if ($afterShave__AETemplate_DEBUG)
		print ("slider: \"" + $control_name + "\"\n");

	CTSimulationParameterReplace($unique_name, $intSlider, $toggle_attribute_name_only, $value_attribute_name_with_node_name);
}
global proc CTSimulationSetAngle(string $afterShave_shape_node, string $arrowLocator_transform_node)
{
	float	$f[] = eval("getAttr " + $arrowLocator_transform_node + ".matrix");
	// <<0, 0, 1>> => <<$x, $y, $z>>
	float	$x = $f[8];
	float	$y = $f[9];
	float	$z = $f[10];

	float	$r = sqrt($x * $x + $y * $y + $z * $z);
	if ($r == 0) {
		warning ($arrowLocator_transform_node + ": angle undetermined");
		return;
	}

	float	$theta = rad_to_deg(acos($z / $r));	// [0, 180]
//	print ("theta = " + $theta + "\n");
	float	$phi = $x == 0 ? ($y == 0 ? 0 : ($y > 0 ? 90 : 270)) : rad_to_deg(atan(abs($y) / abs($x)));
	if ($x != 0) {
		if ($x > 0) {
			if ($y == 0)
				$phi = 0;
			else if ($y > 0)
				$phi = $phi;
			else	// $y < 0
				$phi = 360 - $phi;
		} else {
			if ($y > 0)
				$phi = 180 - $phi;
			else	// $y < 0
				$phi = 180 + $phi;
		}
	}
//	print ("phi = " + $phi + "\n");
//	setAttr a2.Direction (rad_to_deg($theta)) (rad_to_deg($phi));
	eval("setAttr " + $afterShave_shape_node + ".WindDirection2D " + $phi);
	eval("setAttr " + $afterShave_shape_node + ".WindDirection3D " + $theta + " " + $phi);
}
global proc	CTSimulationReloadAttribute(
	int	$intSlider,	// slider type
	string	$control_name,
	string	$value_attribute_name_with_node_name
)
{
	global int	$afterShave__AETemplate_DEBUG;
	if ($afterShave__AETemplate_DEBUG)
		print (
			"hello, world: intSlider? " + ($intSlider ? "True" : "False") + ", " +
			$control_name + ", " + $value_attribute_name_with_node_name +
			"\n"
		);
	global string	$afterShave__AE_node_name;
	if ($afterShave__AETemplate_DEBUG)
		print ("|" + $afterShave__AE_node_name + "|" + "\n");
	string	$node_name = `match "[^.]*" $value_attribute_name_with_node_name`;
	string	$buffer[];
	tokenize($value_attribute_name_with_node_name, ".", $buffer);
	string	$value_attribute_name_without_node_name = $buffer[1];
	if ($afterShave__AETemplate_DEBUG)
		print ("|" + $value_attribute_name_without_node_name + "|" + "\n");

	string	$attribute = $node_name + "." + $value_attribute_name_without_node_name;
	eval(($intSlider ? "intSliderGrp" : "floatSliderGrp") + " -edit -value " + `getAttr $attribute` + " " + $control_name);
}
global proc	CTSimulationToggle_sliderGrp(
	int	$on,
	string	$unique_name,
	int	$intSlider,	// slider type
	string	$toggle_attribute_name_only
)
{
	global int	$afterShave__AETemplate_DEBUG;
	global string	$afterShave__AE_node_name;
	if ($afterShave__AETemplate_DEBUG)
		print ("|" + $afterShave__AE_node_name + "|" + "\n");
	if ($intSlider)
		intSliderGrp -edit -enable $on ("sliderGrp_" + $unique_name);
	else
		floatSliderGrp -edit -enable $on ("sliderGrp_" + $unique_name);
	setAttr ($afterShave__AE_node_name + "." + $toggle_attribute_name_only) $on;
}
global proc	CTSimulationValue_sliderGrp(
	string	$unique_name,
	int	$intSlider,	// slider type
	string	$value_attribute_name_with_node_name
)
{
	global int	$afterShave__AETemplate_DEBUG;
	global string	$afterShave__AE_node_name;
	if ($afterShave__AETemplate_DEBUG)
		print ("|" + $afterShave__AE_node_name + "|" + "\n");
	string	$node_name = `match "[^.]*" $value_attribute_name_with_node_name`;
	string	$buffer[];
	tokenize($value_attribute_name_with_node_name, ".", $buffer);
	string	$value_attribute_name_without_node_name = $buffer[1];
	if ($afterShave__AETemplate_DEBUG)
		print ("|" + $value_attribute_name_without_node_name + "|" + "\n");

	if ($value_attribute_name_without_node_name == "InverseTimeStep") {
//		confirmDialog -title "Warning" -message "Inverse Time Step: AS OF 3/8/2009 (EST), Only 240 in Maya Plug-in" -button "Ok";
		warning "Inverse Time Step: AS OF 3/8/2009 (EST), Only 240 in Maya Plug-in";
		int	$InverseTimeStep = `getAttr ($afterShave__AE_node_name + ".InverseTimeStep")`;
		intSliderGrp -edit -value $InverseTimeStep ("sliderGrp_" + $unique_name);
		return;

		int	$SimulationStatus = `getAttr ($afterShave__AE_node_name + ".SimulationStatus")`;
		if ($SimulationStatus != -1) {
			confirmDialog -title "Warning" -message "Inverse Time Step: Only applied befor simulation" -button "Ok";
			int	$InverseTimeStep = `getAttr ($afterShave__AE_node_name + ".InverseTimeStep")`;
			intSliderGrp -edit -value $InverseTimeStep ("sliderGrp_" + $unique_name);
			return;
		}
	}
	if ($intSlider) {
		int	$val = `intSliderGrp -query -value ("sliderGrp_" + $unique_name)`;
		setAttr ($afterShave__AE_node_name + "." + $value_attribute_name_without_node_name) $val;
	} else {
		float	$val = `floatSliderGrp -query -value ("sliderGrp_" + $unique_name)`;
		setAttr ($afterShave__AE_node_name + "." + $value_attribute_name_without_node_name) $val;
	}
}
global proc	CTSimulationParameterReplace(
	string	$unique_name,
	int	$intSlider,	// slider type
	string	$toggle_attribute_name_only,
	string	$value_attribute_name_with_node_name
)
{
	global int	$afterShave__AETemplate_DEBUG;
	if ($afterShave__AETemplate_DEBUG)
		print (
			"hello, world: CTSimulationParameterReplace: |" + $unique_name + "|" + ", " +
			"|" + $toggle_attribute_name_only + "|" + ", " +
			"|" + $value_attribute_name_with_node_name + "|" +
			"\n"
		);
	string	$node_name = `match "[^.]*" $value_attribute_name_with_node_name`;
	global string	$afterShave__AE_node_name;
	$afterShave__AE_node_name = $node_name;
	if ($afterShave__AETemplate_DEBUG)
		print ("$node_name:= |" + $node_name + "|" + "\n");
	if ($toggle_attribute_name_only != "") {
		int	$val = `getAttr ($node_name + "." + $toggle_attribute_name_only)`;
		checkBox -edit -value $val ("checkbox_" + $unique_name);
	}
	string	$control_name = "sliderGrp_" + $unique_name;
	float	$val = `getAttr $value_attribute_name_with_node_name`;
	if ($intSlider)
		intSliderGrp -edit -value ((int) $val) $control_name;
	else
		floatSliderGrp -edit -value $val $control_name;

	string	$command = "CTSimulationReloadAttribute " + $intSlider + " " + $control_name + " " + $value_attribute_name_with_node_name;
	scriptJob -parent $control_name -replacePrevious -attributeChange $value_attribute_name_with_node_name $command;

	if ($unique_name == "spWD2D") {
		// arrowLocator.h 에 정의된 SIMULATION_PARAMETER_ARROW_LOCATOR_NAME 와 같은 이름이어야 한다!
		string	$SIMULATION_PARAMETER_ARROW_LOCATOR_NAME = "CTSimulationParameterArrowLocator";

		string	$afterShave_shape_node = `match "[^.]*" $value_attribute_name_with_node_name`;
		string	$arrowLocator_transform_node = "transformArrowLocator_" + $afterShave_shape_node;
		string	$arrowLocator_shape_node = "shapeArrowLocator_" + $afterShave_shape_node;
		string	$arrowLocatorArray[] = `ls -exactType $SIMULATION_PARAMETER_ARROW_LOCATOR_NAME`;
		int	$alreadyExist = 0;	// false
		for ($arrowLocator in $arrowLocatorArray) {
			if ($arrowLocator == $arrowLocator_shape_node) {
				$alreadyExist = 1;
				break;
			}	
		}
		if ($alreadyExist == 0) {
			// Save selection
			string	$selectArray[] = `ls -sl`;

			createNode transform -name $arrowLocator_transform_node;
			eval("setAttr " + $arrowLocator_transform_node + ".rotateY 90");
			eval("setAttr " + $arrowLocator_transform_node + ".rotateX -90");
			createNode $SIMULATION_PARAMETER_ARROW_LOCATOR_NAME -parent $arrowLocator_transform_node -name $arrowLocator_shape_node;
			eval("setAttr " + $arrowLocator_shape_node + ".Direction 0 0");
			eval("setAttr " + $arrowLocator_shape_node + ".Length 10");
			eval("setAttr " + $arrowLocator_shape_node + ".Point 10");

			eval("scriptJob -attributeChange " + $arrowLocator_transform_node + ".rotate \"CTSimulationSetAngle " + $afterShave_shape_node + " " + $arrowLocator_transform_node + "\"");

			// Load selection
			select -clear;
			for ($i = 0; $i < size($selectArray); ++$i) {
//				print ("|" + $selectArray[$i] + "|\n");
				select -add $selectArray[$i];
			}
			// hilite
			hilite -replace $afterShave_shape_node;
		}
	}
}

global proc	CTSimulationFilename_textField(
	string	$control_name,
	string	$value_attribute_name_with_node_name
)
{
	global int	$afterShave__AETemplate_DEBUG;
	global string	$afterShave__AE_node_name;
	if ($afterShave__AETemplate_DEBUG)
		print ("|" + $afterShave__AE_node_name + "|" + "\n");
	string	$node_name = `match "[^.]*" $value_attribute_name_with_node_name`;
	string	$buffer[];
	tokenize($value_attribute_name_with_node_name, ".", $buffer);
	string	$value_attribute_name_without_node_name = $buffer[1];
	if ($afterShave__AETemplate_DEBUG)
		print ("|" + $value_attribute_name_without_node_name + "|" + "\n");
	string	$filename = `textField -query -text $control_name`;
	setAttr ($afterShave__AE_node_name + "." + $value_attribute_name_without_node_name) -type "string" $filename;
}
global proc	CTSimulationParameterFileNew(string $unique_name, string $label, int $mode, string $fileAttribute)
{
	string	$control;
	$control = `rowLayout -nc 3 layout_parameterFile`;
//	print ($control + "\n");
	$control = `text -label $label`;
//	print ($control + "\n");
	string	$control_name = "textField_" + $unique_name;
	string	$change_command = "CTSimulationFilename_textField " + $control_name + " " + $fileAttribute;
	$control = `textField -changeCommand $change_command $control_name`;
//	print ($control + "\n");
	$control = `symbolButton -image "navButtonBrowse.xpm" ("browser_" + $unique_name)`;
//	print ($control + "\n");

	CTSimulationParameterFileReplace($unique_name, $mode, $fileAttribute);
}
global proc	CTSimulationReloadFileAttribute(
	string	$control_name,
	string	$fileAttribute
)
{
	global int	$afterShave__AETemplate_DEBUG;
	if ($afterShave__AETemplate_DEBUG)
		print (
			"hello, world: " +
			$control_name + ", " + $fileAttribute +
			"\n"
		);
	global string	$afterShave__AE_node_name;
	if ($afterShave__AETemplate_DEBUG)
		print ("|" + $afterShave__AE_node_name + "|" + "\n");
	string	$node_name = `match "[^.]*" $fileAttribute`;
	string	$buffer[];
	tokenize($fileAttribute, ".", $buffer);
	string	$value_attribute_name_without_node_name = $buffer[1];
	if ($afterShave__AETemplate_DEBUG)
		print ("|" + $value_attribute_name_without_node_name + "|" + "\n");

	string	$attribute = $node_name + "." + $value_attribute_name_without_node_name;
	string	$filename = `getAttr $attribute`;
	textField -edit -text $filename $control_name;
}
global proc	CTSimulationParameterFileReplace(string $unique_name, int $mode, string $fileAttribute)
{
	string	$node_name = `match "[^.]*" $fileAttribute`;
	global string	$afterShave__AE_node_name;
	$afterShave__AE_node_name = $node_name;

	string	$control_name = "textField_" + $unique_name;
	string	$text = `getAttr $fileAttribute`;
	textField -edit -text $text $control_name;
	// parameterFileNameField 의 경우, 단 두 개(_0, _1)이 Control 이 존재하므로,
	// AEparameterNew/CTSimulationParameterFileReplace 와 달리, connectControl 을 사용할 수 있다!
//	connectControl ("parameterFileNameField_" + $mode) $fileAttribute;
	$control_name = "textField_" + $unique_name;
	string	$command = "CTSimulationReloadFileAttribute " + $control_name + " " + $fileAttribute;
	scriptJob -parent $control_name -replacePrevious -attributeChange $fileAttribute $command;

	string	$callback = "CTSimulationAssignParameterFile" + " " + $fileAttribute;
	button -edit -command ("CTSimulationParameterFileBrowser " + $mode + " \"" + $callback + "\"") ("browser_" + $unique_name);
}
global proc	CTSimulationAssignParameterFile(string $fileAttribute, string $filename, string $fileType)
{
//	print ("$fileAttribute: |" + $fileAttribute + ", $filename: |" + $filename + "|, $fileType: |" + $fileType + "|\n");
	setAttr $fileAttribute -type "string" $filename;
}
global proc	CTSimulationParameterFileBrowser(int $mode, string $callback)
{
	if ($mode != 0 && $mode != 1) {
		warning ("mode = " + $mode + ": 0(Load), 1(Save) Only");
		return;
	}

//	string	$workspace = `workspace -query -fullName`;
//	setWorkingDirectory $workspace "image" "sourceImages";
	
//	fileBrowser($callback, "Open", "image", $mode);
	fileBrowserDialog
		-mode $mode
		-fileCommand $callback
//		-fileType "xxx"	// "mayaAscii", "mayaBinary", "mel", "OBJ", "directory", "plug-in", "audio", "move", "EPS", "Illustrator", "image"
		-actionName ($mode ? "Save" : "Load")
		-operationMode ($mode ? "SaveAs" : "Import")
//		-includeName $workspace
		-dialogStyle 1	// 0, 1, 2
		-filterList "Simulation Parameter File (*.kps),*.kps"
	;
}
/*
global proc selectAllGuides(string $afterShaveShapeNode)
{
//	print ("selectAllGuides: $afterShaveShapeNode: |" + $afterShaveShapeNode + "|\n");
	if (`nodeType $afterShaveShapeNode` != "afterShaveShapeNode") {
		warning ("\"" + $afterShaveShapeNode + "\": NOT afterShaveShapeNode");
		return;
	}

	int	$n = `getAttr -size ($afterShaveShapeNode + ".controlPoints")`;
	int	$N = `getAttr ($afterShaveShapeNode + ".numPointsInGuide")`;
	select -replace ($afterShaveShapeNode + ".e[0:" + ($n / $N - 1) + "]");
	if (!`selectMode -query -component`)
		selectMode -component;

	refresh -force;	// 선택된 것이 즉시 보이도록 한다.
			// 선택되었다고 해서 다른 동작을 즉시 취할 수 있는 것은 아니다?
			// 늑대에 심어진 모든 가이드털을 선택한 후, 예를 들어,
			// "attenuate length" 버튼을 누르기까지 한참 기다려야 한다.
}
global proc select_all_guides()
{
	if (`selectMode -query -component`) {
		string	$selectArray[] = `ls -selection`;
//		print (size($selectArray) + "\n");
		if (size($selectArray)) {
//			print ($selectArray[0] + "\n");
			string	$node = `match "[^.]*" $selectArray[0]`;
			$selectArray = `ls -dagObjects $node`;
			if (`nodeType $selectArray[1]` == "afterShaveShapeNode") {
//				print ("afterShaveShapeNode: |" + $selectArray[1] + "|\n");
				selectAllGuides $selectArray[1];
			} else {
				warning "No afterShaveShapeNode";
			}
		} else {
			string	$hiliteArray[] = `ls -hilite`;
			print (size($hiliteArray) + "\n");
			if (size($hiliteArray)) {
//				print ($hiliteArray[0] + "\n");
				string	$node = $hiliteArray[0];
				if (`nodeType $node` == "transform") {
					$selectArray = `ls -dagObjects $hiliteArray[0]`;
					$node = $selectArray[1];
				}
//				print ("$node: |" + $node + "|\n");
				if (`nodeType $node` == "afterShaveShapeNode") {
//					print ("afterShaveShapeNode: |" + $selectArray[1] + "|\n");
					selectAllGuides $node;
				} else {
					warning "No afterShaveShapeNode";
				}
			} else {
				warning "No afterShaveShapeNode";
			}
		}
	} else if (`selectMode -query -object`) {
		string	$selectArray[] = `ls -selection`;
//		print (size($selectArray) + "\n");
		if (size($selectArray)) {
//			print ($selectArray[0] + "\n");
			string	$node = `match "[^.]*" $selectArray[0]`;
			$selectArray = `ls -dagObjects $node`;
			if (`nodeType $selectArray[1]` == "afterShaveShapeNode") {
//				print ("afterShaveShapeNode: |" + $selectArray[1] + "|\n");
				selectAllGuides $selectArray[1];
			} else {
				warning "No afterShaveShapeNode";
			}
		} else {
			warning "No afterShaveShapeNode";
		}
	}
}
 */
