================================================================================
이 문서는 파일캐쉬를 사용하여 모델 바꿔치기 하는 과정을 설명한다.

1. 의 과정을 따라 파일캐쉬를 준비하고, 2. 에서 언급한 값을 정의한 후
3. 처럼 모델 바꿔치기를 한다.
키를 사용하는 예가 4.에 나와있다.


1. 파일캐쉬 준비
----------------
여러 개의 표준모델을 사용하기 위해서 파일캐쉬를 따로 만들어야 한다.
하나의 파일캐쉬 안에 여러 개의 표준모델의 정보가 들어있다.
각 표준모델을 구분하기 위해 표준모델마다 고유의 숫자 아이디가 있다.

여러 개의 표준모델의 정보를 담는 사용하는 파일캐쉬를 만들기 위해서는 다음 과정을 따른다.
1) kPolygon.h 에서 다음 세 값들을 정의한다.
	STANDARD_MODEL
	MODEL_TYPE
	__WRITE_FILES__

__WRITE_FILES__ 가 핵심인데,
이 값이 정의되기 위해서는 STANDARD_MODEL 과 MODEL_TYPE 가 정의되어야 한다;
MODEL_TYPE 은 항상 STANDARD_MODEL_TEST 로 정의되어야 한다.
STANDARD_MODEL 는 만들려는 표준모델에 따라 적절한 값으로 설정되어야 한다;
현재(2009년 9월 11일 EST) 두 값 중의 하나이다: ETRI_STANDARD_MODEL, DAZ_STUDIO_STANDARD_MODEL

2) 여러 개의 표준모델을 사용하는 파일캐쉬를 만들기 위해서는 다음 세 값이 추가적으로 정의되어야 한다.
	MULTI_STANDARD
	WRITE_APPEND
	STANDARD_ID

STANDARD_ID 는 STANDARD_MODEL 에서 정의한 표준모델에 부여하는 고유의 숫자 아이디이다.
0부터 시작해서 1씩 증가한다;
현재는 DAZ_STUDIO_STANDARD_MODEL 을 0번에, ETRI_STANDARD_MODEL 을 1번에 할당했다.
	주) 아래 3)에서 설명하는 MESH_LOADER_READ_FILES 구조와
	MESH_READ_FILES 구조로 이루어진 배열에 대한 인덱스이다.

WRITE_APPEND 는 여러 표준모델이 하나의 파일캐쉬에 들어가도록 하는 것으로
처음 만들 때(STANDARD_ID 가 0인 경우)는 정의되지 않지만
이어지는 파일캐쉬를 만들 때(STANDARD_ID 가 0 이 아닐 때)는 반드시 정의되어야 한다.

1), 2) 를 사용하는 예를 DAZ_STUDIO_STANDARD_MODEL 의 STANDARD_ID = 0,
ETRI_STANDARD_MODEL 의 STANDARD_ID = 1 로 하는 경우에 알아본다.
	[단계 1] kPolygon.h 에 있는 값들을 다음과 같이 정의하여
	첫 번재 표준모델인 DAZ_STUDIO_STANDARD_MODEL 에 대한 파일캐쉬를 만든다.
		#define STANDARD_MODEL	DAZ_STUDIO_STANDARD_MODEL
		#define MODEL_TYPE	STANDARD_MODEL_TEST
		#define MULTI_STANDARD
		#define __WRITE_FILES__
		#define STANDARD_ID	0
	[단계 2] 두 번째 표준모델인 ETRI_STANDARD_MODEL 에 대한 파일캐쉬를 추가하기 위해
	이 중에서 STANDARD_MODEL 을 바꾸고 STANDARD_ID 도 1로 바꾼다.
	파일캐쉬에 추가되므로 WRITE_APPEND 을 정의한다.
		#define STANDARD_MODEL	ETRI_STANDARD_MODEL
		#define MODEL_TYPE	STANDARD_MODEL_TEST
		#define MULTI_STANDARD
		#define __WRITE_FILES__
		#define WRITE_APPEND
		#define STANDARD_ID	1
		
3) 마지막으로 파일캐쉬를 사용하기 위해 두 개의 헤더파일을 만들어야 한다:
	__meshLoader_READ_FILES_M__.h
	__mesh_READ_FILES_M__.h

각각 kPolygon.h 에 정의된 MESH_LOADER_READ_FILES 구조와
MESH_READ_FILES 구조로 이루어진 배열에 대한 정보를 담고 있다.

2)에서 부여한 STANDARD_ID 가 이 배열에 대한 인덱스이다.
현재 STANDARD_ID = 0 이 DAZ_STUDIO_STANDARD_MODEL 에,
STANDARD_ID = 1 가 ETRI_STANDARD_MODEL 에 할당되었다.

각 구조를 보면 첫 번째는 배열 변수에 대한 포인터이고,
두 번째는 그 배열의 크기이다; 파일캐쉬를 열면 여러 형태의 배열이 정의되어 있고,
그 크기도 함께 적혀있다. 예를 들어, DAZ_STUDIO_STANDARD_MODEL 을 사용하는 경우(STANDARD_ID = 0),
Vertex 정보를 담은 파일(__Vertices__)을 보면 다음과 같은 실수(float)형 배열이 있다.

	static const float	__Vertices_ID0__[289350]={...};

__mesh_READ_FILES_M__.h 에 적어주어야 하는 것이 변수이름인 __Vertices_ID0__ 와 배열의 크기인 289350 이다.
실제로 예제 __mesh_READ_FILES_M__.h 에 첫 번째 성분(STANDARD_ID = 0)의 구조에 다음과 같이 적혀있다.

	{__Vertices_ID0__, 289350},

이는 파일캐쉬를 만들 때, 다음과 같은 형태로 출력되므로 굳이 파일캐쉬를 열지않더라도
__mesh_READ_FILES_M__.h 을 작성할 수 있다.

	       Writing __Vertices_M__...
	/* ... */       {__Vertices_ID0__, 289350},
	...Done

/* ... */ 다음 부분을 복사해서 사용하면 된다.

	주) 1), 2) 에서 만든 파일캐쉬에 맞는 두 헤더파일은 표준모델이 바뀌지 않는 이상,
	따로 첨부된 __meshLoader_READ_FILES_M__.h 와 __mesh_READ_FILES_M__.h 를 사용해도 된다;
	실제로 파일캐쉬도 한 번 만들면 표준모델이 바뀌지 않는 한 변하지 않으므로 같은 파일캐쉬를 써도 된다.
	하지만 크기 때문에 1), 2)에서 만드는 과정을 설명했으니 필요한 사람이 만들어서 사용한다.


2. 모델 바뀌치기 준비
---------------------
두 헤더파일(kPolygon.h, kPick.h)에서 아래 다섯 개의 값들을 정의한 후 실행파일을 만들면
모델을 바뀌칠 수 있는 실행파일이 만들어진다.

1) kPick.h 파일에서 다음 두 값을 정의(#define)한다. (required: 필요조건)
	USE__PickVar
	USE__fileOpen

USE__fileOpen 이 핵심이다. 이 값이 정의되기 위해서는 USE__PickVar 를 반드시 설정해야한다.

USE__fileOpen 이 설정되면 강제로 USE__pointer_to_kMesh 가 설정된다.

2) 매번 .OBJ 파일을 읽을 때 시간이 걸리므로 파일캐쉬를 사용한다. (optional: 권장사항)
파일캐쉬를 사용하는 방법은 이전과 비슷하게 kPolygon.h 에서 다음 세 값을 설정한다.
	STANDARD_MODEL
	__READ_FILES__
	MULTI_STANDARD

핵심은 __READ_FILES__ 이다. 이 값이 정의되기 위해서는
STANDARD_MODEL 가 정의되어야 하기 때문에 STANDARD_MODEL 을 먼저 정의한다;
이전과 달리, STANDARD_MODEL 이 어떤 값으로 정의되냐는 중요하지 않다.

USE__fileOpen 을 사용하면, 이전과 달리,
MODEL_TYPE 은 정의될 필요도 없고 정의되더라도 더 이상 사용되지 않는다.

여러 개의 표준모델을 사용할 수 있고 측정모델에 맞는 표준모델을 사용하기 위해서는
MULTI_STANDARD 를 정의한다.


3. 모델 바뀌치기 테스트
-----------------------
프로그램을 실행하면 아무런 모델이 없는 화면이 나타난다.
PickVar::load, PickVar::unload 함수를 사용하여 필요할 때마다 모델을 올리거나 내리면 된다.

모델을 올리 때 이전과 마찬가지로 기본적으로는 kMesh::setAll 함수를 사용한다.
위 PickVar::load 함수의 인자로 사용하기 위해 setAll 에 들어가는 모든 변수를 kMesh::SetAllArg 구조에 담았을 뿐이다.
이전과 마찬가지로 kMesh::SetAllArg 를 작성한다.

예를 들어, 이전에 에트리 측정모델을 로드할 때
다음과 같이 kMesh::setAll 함수를 호출했다면

	gMesh.setAll(
		&state,
		L"Media\\Scanner\\tiny.x", pd3dDevice, L"../include/mesh/mesh.fx",
		1.f / .8f,
#ifdef __READ_FILES__
		true,
#ifdef MULTI_STANDARD
		1,	// STANDARD_ID
#endif	// MULTI_STANDARD
#endif
		"Media\\Scanner\\여자모델_Vic090609\\EW_1RH.obj",
		L"Media\\Scanner\\여자모델_Vic090609\\tex\\"
	);

여기서는 같은 값들을 써서 kMesh::SetAllArg 구조를 만든다.

	// 파라미터 설정
	kMesh::SetAllArg	arg;
	arg.statePtr		= &state;
	arg.xSourceFilePtr	= L"Media\\Scanner\\tiny.x";
	arg.devicePtr		= pd3dDevice;
	arg.effectSourceFilePtr	= L"../include/mesh/mesh.fx";
	arg.fScale 		= 1.f / .8f;
#ifdef __READ_FILES__
	arg.stillRead		= true;
#ifdef MULTI_STANDARD
	arg.index_to_standard	= 1;	// 1:= 에트리 표준모델 인덱스
#endif	// MULTI_STANDARD
#endif	// __READ_FILES__
	arg.objFilePtr		= "Media\\Scanner\\여자모델_Vic090609\\EW_1RH.obj";	// 에트리 측정모델(1)
	arg.texturePath		= L"Media\\Scanner\\여자모델_Vic090609\\tex\\";	// 텍스쳐 사용

이것을 kMesh 의 Instance 가 측정모델이냐 표준모델이냐에 따라 결정되는 것이지
kMesh::setAll 함수를 호출할 때에는 측정모델/표준모델의 구분은 없다.
단, 파일캐쉬를 사용하는 경우,
표준모델의 로딩 시간을 줄이기 위해 stillRead 를 false 로 설정한다.
하지만 측정모델의 경우 반드시 true 로 설정해야 한다.
(물론 objFilePtr 은 적절하게 해당 모델이름을 가리키고 있어야 한다.)

모델을 올리고 내리는 과정은 단순하다;
올릴 때는 PickVar::load 함수를, 내릴 때는 PickVar::unload 함수를 사용하면 된다.
PickVar::load 함수와 관련하여 몇 가지 주의사항이 있다.

	1. 올릴 때는 화면에 측정모델이 나타나도록
	카메라 설정이나 ArcBall 설정을 해야 하므로,
	SetCameraArcBall 를 호출해야 한다.
	단 화면에 나타나는 기준은 측정모델이므로
	측정모델을 올릴 때만 이 함수를 호출한다.

	2. 모델을 올릴 때, PickVar::load 함수의 첫 번째 인자에,
	측정모델(MODEL_TYPE__REAL)인지 표준모델인지(MODEL_TYPE__STANDARD) 적어야 한다.

	3. PickVar::load 의 세 번째 인자가 있다. (bool connectable)
	대부분의 측정모델은 표준모델과 연관이 있으므로 PickVar::load 에서
	이러한 연결을 알아서 처리한다. (PickVar::__connect)
	하지만 테스트모델의 경우 연결해서 사용할 표준모델이 없는 경우 이 값을 false 해서
	PickVar::load 함수를 호출한다.

	4. PickVar::load 에서 측정모델과 표준모델을 자동으로 연결한다. (PickVar::__connect)
	kPolygon.h 에서 __READ_FILES__, MULTI_STANDARD 을 정의한 경우,
	측정모델과 표준모델인 같은 표준모델에서 나온 것인지 확인해서
	같은 STANDARD_ID 인 경우에만 연결한다.

PickVar::unload 를 호출할 때는 측정모델(MODEL_TYPE__REAL),
표준모델(MODEL_TYPE__STANDARD) 중에 어느 것을 내릴지만 알려주면 충분하다.

	주) PickVar::load 나 PickVar::unload 는 반복적으로 사용해도 된다.
	모델이 로드된 상태라면 먼저 자동으로 내린 후 새로운 모델을 올린다;
	굳이 load -> unload -> load 과정을 거치지 않아도 된다.

PickVar 에는 공개된 또 하나의 함수가 있다: PickVar::OnCreateDevice
이름이 말해주듯 Pick.cpp 의 OnCreateDevice Callback 함수에서 사용되어야 한다.
(물론 USE__fileOpen 이 정의된 경우에 한해서)
이 Callback 함수는 시작할 때뿐만아니라 화면크기를 조절할 때도 호출된다.
이 때 이전에 로드되었던 모델을 다시 로드하는 함수가 PickVar::OnCreateDevice 함수이다.

	주) DirectX 에서 화면크기 조절과 같은 경우 새롭게 IDirect3DDevice9 가 설정된다.
	이렇게 되면 모든 DirectX 오브젝트는 새로 만들어야 한다.


4. 모델바꿔치기 예
------------------
F8 키에 예들이 나와있다.

	SHIFT	CTRL	ATL
	x	x	x	에트리 측정모델(2) 로드		아래 주)
	x	x	o	DAZ 측정모델(1) 로드
	o	x	x	에트리 측정모델(1) 로드
	o	o	o	DAZ 표준모델[0] 로드
	o	x	o	에트리 표준모델[1] 로드
	x	o	x	측정모델 언로드
	x	o	o	표준모델 언로드

에트리 측정모델이 테스트를 위해 추가되었다;
DAZ 의 경우 측정모델이 하나, 에트리의 경우 측정모델이 둘이다.
소괄호 안의 숫자는 어느 측정모델인지를 말한다.
대괄호 안의 숫자는 표준모델의 숫자 아이디(STANDARD_ID)이다:
DAZ 표준모델의 경우 0, 에트리 표준모델의 경우 1이다.

	주) 테스트모델(tiny.x)을 이 방식에서 사용할 때 사용되는 키이다.
	프로그램을 만들 때, kPolygon.h 에서 STANDARD_MODEL 을 정의하지 않으면 된다.

	에트리 측정모델(2)를 제외하고 다른 모델도 로드/언로드를 할 수 있으나
	파일캐쉬를 사용하지 않으니 매번 .OBJ 파일을 읽어 kMesh 를 설정해야므로
	로딩 시간이 길다.
================================================================================

	작성자: 김광호
	작성일자: 2009년 9월 13일 (EST)
	문서버젼: 0.1 (비공개버젼: 0.1)
	문서완성도: 미완성
