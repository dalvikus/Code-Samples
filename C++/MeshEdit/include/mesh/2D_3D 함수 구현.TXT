제목: 3D 와 2D 와의 연동 함수 구현

우선 "신체계측" 페이지와 "등고선" 페이지를 구현한다.

	작성자: 김광호
	작성일자: 2009년 6월 11일 (미완성)
	수정일자: 2009년 6월 15일 (미완성); "화면 뷰" 페이지 완성
	수정일자: 2009년 6월 17일 (미완성); "시뮬레이션" 페이지 완성
	문서버젼: 0.1 (미완성)


신체계측 페이지
===============
1) 측정방법에서 기본을 사용; 줄자는 아직 구현 안 됨
2) 임의항목, 자동재측정은 3D 에서는 구현되어 있으나 2D 함수로 구현 안 됨(조작툴 완성 후 구현 예정)

체중: type:= TYPE__WEIGHT_MEASURE
----
1. 정의
#if 1	// 체중
typedef enum {
	WEIGHT_MEASURE__UNDEF = -1,
	WEIGHT_MEASURE__LEFT,	// 왼쪽 체중
	WEIGHT_MEASURE__RIGHT,	// 오른쪽 체중
	WEIGHT_MEASURE__TOTAL	// 전체 체중
} WEIGHT_MEASURE__TYPE;
#endif

2. 함수
	1) 값을 얻을 때; 얻는 것만 있다.
	subType:= WEIGHT_MEASURE__TYPE 중의 하나
	dataPtr:= 체중 값을 가지는 float 에 대한 포인터
		// 왼쪽 체중 값을 얻을 때
		float	weight;
		3dlib.getValue(TYPE__WEIGHT_MEASURE, WEIGHT_MEASURE__LEFT, &weight);


길이(둘레, 넓이, 길이) 측정: type:= TYPE__TAPE_MEASURE
---------------------------
1. 상수
#if 1	// 길이 측정
typedef enum {
	TAPE_MEASURE__UNDEF = -1,
	// 둘레
	TAPE_MEASURE__HEAD = 0,		// 머리 둘레
	TAPE_MEASURE__NECK,		// 목 둘레
	TAPE_MEASURE__BREAST,		// 가슴 둘레
	TAPE_MEASURE__WAIST,		// 허리 둘레
	TAPE_MEASURE__HIP,		// 엉덩이 둘레
	TAPE_MEASURE__LEFT_THIGH,	// 왼쪽 허벅지 둘레
	TAPE_MEASURE__RIGHT_THIGH,	// 오른쪽 허벅지 둘레
	TAPE_MEASURE__LEFT_FOREARM,	// 왼쪽 팔뚝 둘레
	TAPE_MEASURE__RIGHT_FOREARM,	// 오른쪽 팔뚝 둘레
	// 길이
	TAPE_MEASURE__HEIGHT,		// 키
	TAPE_MEASURE__SEATED_HEIGHT,	// 앉은 키
	TAPE_MEASURE__SHOULDER_WIDTH,	// 어깨 넓이
	TAPE_MEASURE__LEFT_LEG,		// 왼쪽 다리
	TAPE_MEASURE__RIGHT_LEG,	// 오른쪽 다리
	TAPE_MEASURE__LEFT_ARM,		// 왼쪽 팔
	TAPE_MEASURE__RIGHT_ARM,	// 오른쪽 팔
} TAPE_MEASURE__TYPE;
#endif

2. 함수
	1) getValue: 길이를 얻을 때
	type:= TYPE__TAPE_MEASURE
	subType:= TAPE_MEASURE 중의 하나
	dataPtr:= subType 에 해당하는 길이(둘레의 길이 또는 순수한 길이)에 대한 포인터(float*)
		// 키 값을 얻는다.
		float	length;
		3dlib.getValue(TYPE__TAPE_MEASURE, TAPE_MEASURE__HEIGHT, &length);

	2) setValue: 해당 길이를 화면에 표시할 때
	type:= TYPE__TAPE_MEASURE
	subType:= TAPE_MEASURE 중의 하나
	dataPtr:= subType 에 해당하는 부위를 표시할 지를 말해주는 포인터(bool*)

		// 키 값을 얻는 데 사용된 정보를 화면에 표시한다.
		bool	visible = true;
		3dlib.setValue(TYPE__TAPE_MEASURE, TAPE_MEASURE__HEIGHT, &visible);

	주) 아무것도 나타나지 않게 하려면 subType = TAPE_MEASURE__UNDEF, *((bool*) dataPtr) = true 로 설정한다.
		// 표시된 부분이 어디인지 상관없이 아무것도 표시하지 않을 때
		bool	reset = true;
		3dlib.setValue(TYPE__TAPE_MEASURE, TAPE_MEASURE__UNDEF, &reset);


영역 표시: type:= TYPE__AREA
---------
1. 상수
#if 1	// 영역
typedef enum {
	AREA__UNDEF = -1,

	AREA__ALL = 0,		// 전체

	AREA__TRUNK = 1,	// 몸통
	AREA__LEFT_ARM,		// 왼쪽 팔
	AREA__RIGHT_ARM,	// 오른쪽 팔
	AREA__LEFT_LEG,		// 왼쪽 다리
	AREA__RIGHT_LEG,	// 오른쪽 다리

	AREA__NECK,		// 목
	AREA__CHEST,		// 가슴
	AREA__ABDOMINAL,	// 복부
	AREA__HIP,		// 엉덩이
	AREA__LEFT_THIGH,	// 왼쪽 허벅지
	AREA__RIGHT_THIGH,	// 오른쪽 허벅지
	AREA__LEFT_CALF,	// 왼쪽 장단지
	AREA__RIGHT_CALF,	// 오른쪽 장단지
} AREA__TYPE;
#endif

2. 함수
"길이(둘레, 넓이, 길이) 측정"과 매우 유사한다;
getValue 에서 얻어내는 값은 길이가 아닌 해당 영역에 있는 점들의 갯수이다.

	1) getValue: 특정 영역에 있는 점의 갯수를 알아낼 때
	subType:= AREA__TYPE 중의 하나
	dataPtr:= unsigned 에 대한 포인터
		// 몸통을 이루는 점의 갯수을 얻을 때
		unsigned	numPoints;
		3dlib.getValue(TYPE__AREA, AREA__TRUNK, &numPoints);

	2) setValue: 특정 부위를 표시하고자 할 때
	subType:= AREA__TYPE 중의 하나
	dataPtr:= 표시 여부를 말하는 bool 에 대한 포인터
		// 몸통을 표시할 때
		bool	visible = true;
		3dlib.setValue(TYPE__AREA, AREA__TRUNK, &visible);

	주) 아무것도 나타나지 않게 하려면 subType = AREA__UNDEF, *((bool*) dataPtr) = true 로 설정한다.
		// 표시된 부분이 어디인지 상관없이 아무것도 표시하지 않을 때
		bool	reset = true;
		3dlib.setValue(TYPE__AREA, AREA__UNDEF, &reset);



등고선 페이지
=============
1) 단면표시, 각도표시는 3D 에서는 구현되어 있으나 아직 2D함수는 구현 안 됨
2) 회전은 "화면 뷰"에서 구현할 예정임

등고선: type:= TYPE__ISOMETRIC
------
1. 상수
#if 1	// 등고선
// TYPE__ISOMETRIC 의 subType
typedef enum {
	ISOMETRIC__TYPE =0,
	ISOMETRIC__PLANE,
} ISOMETRIC__SUBTYPE;

// 각 subType 에 해당하는 변수형
	// 선으로 표시했을 때,
	// 선에 의한 비교는 3차원 뷰(VIEW__PERSPECTIVE) 보다는 2차원 뷰에 잘 나타난다.
	typedef enum {
		// 숫자(0)이 추가된 것은 원래값임을 뜻한다;
		// 직접 사용하지말고 아래의 숫자(0)이 없는 것을 사용한다.
		ISOMETRIC_UNDEF0	= 1 << 0,	// 등고선을 표시하지 않을 때 사용
		ISOMETRIC_LINE0		= 1 << 1,	// 선
		ISOMETRIC_COLOR0	= 1 << 2,	// 색깔

		// 둘 중의 하나만 설정되어야 한다.
		ISOMETRIC_SAVE_COLOR	= 1 << 3,
		ISOMETRIC_RESTORE_COLOR	= 1 << 4,


		// UNDEF 는 원래 색깔로 되돌리는 것이 기본값이다.
		ISOMETRIC_UNDEF				= ISOMETRIC_UNDEF0 | ISOMETRIC_RESTORE_COLOR,
							// UNDEF 와 같고 추가적으로 원래 색깔로 되돌린다;
							// 원래대로 돌아가는 것이므로 색깔을 따로 저장할 필요가 없다.
							// 즉 ISOMETRIC_UNDEF_SAVE_COLOR 는 없다
		ISOMETRIC_UNDEF_WITHOUT_RESTORE_COLOR	= ISOMETRIC_UNDEF0,

		// LINE 은 원래 색깔을 보존하는 것이 기본값이다.
		ISOMETRIC_LINE				= ISOMETRIC_LINE0 | ISOMETRIC_SAVE_COLOR,
							// 선과 같고 추가적으로 색깔을 보존한다.
		ISOMETRIC_LINE_WITHOUT_SAVE_COLOR	= ISOMETRIC_LINE0,
		ISOMETRIC_LINE_WITH_RESTORE_COLOR	= ISOMETRIC_LINE0 | ISOMETRIC_RESTORE_COLOR,
							// 선과 같고 추가적으로 원래 색깔로 되돌린다.
		// COLOR 는 원래 색깔을 보존하는 것이 기본값이다.
		ISOMETRIC_COLOR				= ISOMETRIC_COLOR0 | ISOMETRIC_SAVE_COLOR,
							// 색깔과 같고 추가적으로 색깔을 보존한다;
							// 색깔을 바꾸는 것으므로 원래 색깔로 되돌릴 수는 없다.
							// 즉 ISOMETRIC_COLOR_RESTORE_COLOR 는 없다.
		ISOMETRIC_COLOR_WITHOUT_SAVE_COLOR	= ISOMETRIC_COLOR0,
	} ISOMETRIC_TYPE_T;

	// 동시에 둘 이상의 등고선이 표시될 수도 있다.
	typedef enum {
		ISOMETRIC_XY	= 1 << 0,	// z 값의 차이를 등고선으로 표시;
						// 정면에서 봤을 때 좌우 대칭 유무 판단
		ISOMETRIC_YZ	= 1 << 1,	// x 값의 차이를 등고선으로 표시;
						// 뒷면에서 봤을 때 척추의 휜 정도를 판단
		ISOMETRIC_ZX	= 1 << 2,	// y 값의 차이를 등고선으로 표시;
						// 뒷면에서 봤을 때 어깨의 기울어진 정도를 판단
	} ISOMETRIC_PLANE_T;
#endif

2. 함수
	1) 방법
	subType:= ISOMETRIC__TYPE
	dataPtr:= ISOMETRIC_TYPE_T 에 대한 포인터
	주1) 숫자 0이 붙은 ISOMETRIC_UNDEF0, ISOMETRIC_LINE0, ISOMETRIC_COLOR0 을 기본으로 사용한다.
	색깔이 바뀔 수 있으므로,
	추가적으로 ISOMETRIC_SAVE_COLOR 와 ISOMETRIC_RESTORE_COLOR 를 XOR(^) 해서 사용한다;
	따라서 어떤 Type 인지는 등호 대신에 & 연산자를 사용한다:
		// 등고선 표시가 있는 지를 확인할 때
		ISOMETRIC_TYPE_T	type;
		3dlib.getValue(TYPE__ISOMETRIC, ISOMETRIC__TYPE, &type);
		if (type & ISOMETRIC_UNDEF0) {
			// 등고선 표시가 없다.
		} else {
			// 등고선 표시가 있다.
			if (type & ISOMETRIC_LINE0) {
				// 선으로...
			} else if (type & ISOMETRIC_COLOR0) {
				// 색깔로...
			}
		}
	주2) 주1)의 기본값을 있는 그대로 사용하지 말고, 이들로 정의된 것들을 사용한다;
	예를 들어 ISOMETRIC_UNDEF = ISOMETRIC_UNDEF0 | ISOMETRIC_RESTORE_COLOR 를 사용한다.
	단, 어떤 유형인지를 판단할 때는 기본값을 사용한다.

	2) 단면
	subType:= ISOMETRIC__PLANE
	dataPtr:= ISOMETRIC_PLANE_T 에 대한 포인터
		// XY 평면에 평행인 단면으로 등고선을 만들 때;
		// Z 값에 따라 등고선이 나온다.
		ISOMETRIC_PLANE_T	plane = ISOMETRIC_XY;
		3dlib.setValue(TYPE__ISOMETRIC, ISOMETRIC__PLANE, &plane);

		// XY 평면에 평행인 단면으로 등고선을 만들고 동시에
		// YZ 평면에 평행인 단면으로 등고선을 만들 때
		ISOMETRIC_PLANE_T	plane = ISOMETRIC_XY | ISOMETRIC_YZ;
		3dlib.setValue(TYPE__ISOMETRIC, ISOMETRIC__PLANE, &plane);

		// 등고선 표시를 선으로 할 때
		ISOMETRIC_TYPE_T	type = ISOMETRIC_LINE;
		3dlib.setValue(TYPE__ISOMETRIC, ISOMETRIC__TYPE, &type);

		// 등고선이 표시가 나타나지 않게 할 때
		ISOMETRIC_TYPE_T	type = ISOMETRIC_UNDEF;
		3dlib.setValue(TYPE__ISOMETRIC, ISOMETRIC__TYPE, &type);


모눈종이: type:= TYPE__GRID
--------
1. 정의
#if 1	// 모눈 종이
// TYPE__GRID 의 subType
typedef enum {
	GRID__Z_DEPTH = 0,
	GRID__DIRECTION,
	GRID__INTERVAL,
} GRID__SUBTYPE;

	// 표시
	typedef enum {
		GRID_UNDEF = -1,	// 모눈 종이를 표시하지 않음
		GRID_FRONT,		// 모눈을 제일 앞에 표시
		GRID_BACK,		// 모눈을 제일 뒤에 표시
	} GRID_Z;

	// 방향
	typedef enum {
		GRID_VERTICAL	= 1 << 0,	// 수직
		GRID_HORIZONTAL	= 1 << 1,	// 수평
		GRID_BOTH	= GRID_VERTICAL | GRID_HORIZONTAL,	// 둘 다 표시 (3 = 1 + 2)
	} GRID_DIR;

	// 간격
	struct GRID_STEP
	{
		float	h_step;
		float	v_step;

		// kGrid.cpp 에서 설정
		static const float	H_STEP;
		static const float	V_STEP;

		GRID_STEP() : h_step(H_STEP), v_step(V_STEP) {}
		GRID_STEP(float x, float y) : h_step(x), v_step(y) {}
	};
#endif

2. 함수
	1) 표시
	subType:= GRID__Z_DEPTH
	dataPtr:= GRID_Z 에 대한 포인터
	가능한 값: GRID_UNDEF (표시하지 않음), GRID_FRONT (앞), GRID_BACK (뒤)
		// 현재 모눈 표시 상태 얻기
		GRID_Z	z;
		3dlib.getValue(TYPE__GRID, GRID__Z_DEPTH, &z);
		if (z == GRID_UNDEF) {	// 모눈 표시 안 함
			//...
		} else if (z == GRID_FRONT) {	// 모눈 표시: 앞
			//...
		} else {	// z = GRID_BACK:= 모눈 표시: 뒤
			//...
		}
		// 표시하지 않을 때
		GRID_Z	z = GRID_UNDEF;
		3dlib.setValue(TYPE__GRID, GRID__Z_DEPTH, &z);

	2) 방향
	subType:= GRID__DIRECTION
	dataPtr:= GRID_DIR 에 대한 포인터
	가능한 값: GRID_HORIZONTAL (수평), GRID_VERTICAL (수직), GRID_BOTH (모두)

	3) 간격
	subType:= GRID__INTERVAL
	dataPtr:= GRID_STEP 에 대한 포인터
	가능한 값: 양의 실수
		// 수직 간격을 10% 만큼 줄일 때
		GRID_STEP	step;
		3dlib.getValue(TYPE__GRID, GRID__INTERVAL, &step);
		step.v_step *= .9f;	// h_step
		3dlib.setValue(TYPE__GRID, GRID__INTERVAL, &step);



2-3일 내로 "화면 뷰"와 "체성분 측정" 페이지에 있는 내용에 대한 연동 함수를 구현할 예정임.

	이어서...

화면 자체에 넣을 내용
=====================
1) 표준모델/측정모델 을 선택할 수 있는 "checkbox"; 동시에 선택해서 두 모델을 동시에 볼 수 있다.
TYPE__MODEL 에 의한 설정은 선택된 모델에만 적용; 이 때는 "radio button" 을 사용
2) Picking 을 할 때 대상이 표준모델인지 측정모델인지 선택하는 "radio button"
3) 마우스 동작(이동, 회전, 확대/축소)는 암묵적으로...아니면?
4) 기준축: 3차원 축(왼쪽 아래), 원점, 화면의 중심
5) 경계상자/구 표시
6) 단면: 2차원/3차원
7) 각도 표시: 특정 뷰에서...; (ORTHOGRAPHIC) TOP/BOTTOM/FRONT/BACK/RIGHT/LEFT


화면 뷰 페이지
==============
모델: type:= TYPE__MODEL
----
1. 상수
#if 1	// 모델(표준 모델, 측정 모델)마다 다르게 설정할 수 있다.
typedef enum {
	MODEL__OBJECT,	// 모델을 어떻게 표현할 지: 점/선/면/법선벡터
	MODEL__SHADING,	// 질감; OBJECT_TYPE = OBJECT_FACE 인 경우에만 해당
} MODEL__SUBTYPE;

	// MODEL__OBJECT 인 경우에 사용되는 변수형
	typedef enum {
		OBJECT_UNDEF	= 0,	// 아무것도 표현하지 않는다.

		OBJECT_VERTEX	= 1 << 0,	// 점을 표시 (1)
		OBJECT_EDGE	= 1 << 1,	// 선을 표시 (2)
		OBJECT_FACE	= 1 << 2,	// 면을 표시 (4)
		OBJECT_NORMAL	= 1 << 3,	// 각 점에서 표면에 수직방향 표시 (8)
	} OBJECT_TYPE;	// OBJECT_NONE 을 제외하고, 동시에 두 가지 이상을 표시할 수 있음; XOR(^) 을 사용

	// MODEL__SHADING 인 경우에 사용되는 변수형;
	// mesh.fx 에 있는 g__texture 변수가 같은 값을 사용하도록 맞춰야 한다!
	typedef enum {
		SHADING_NONE	= 0,	// 단색으로 표시
		SHADING_GREY	= 1,	// Grey 효과 (라이팅만 고려)
		SHADING_TEXTURE	= 2,	// Texture 가 들어간 Color
	} SHADING_TYPE;
#endif

2. 함수
	1) 모델 표현 방법; 점/선/면/법선벡터
	subType:= MODEL__OBJECT
	dataPtr:= OBJECT_TYPE 에 대한 포인터
		// 면으로 모델을 나타낼 때
		OBJECT_TYPE	objectType = OBJECT_FACE;
		meshRef.setValue(TYPE__MODEL, MODEL__OBJECT, &objectType);
		// OBJECT_UNDEF 을 사용하면 모델을 표시하지 않도록 할 수 있다.
		OBJECT_TYPE	objectType = OBJECT_UNDEF;
		meshRef.setValue(TYPE__MODEL, MODEL__OBJECT, &objectType);
	2) 표현 방법이 "면"일 때 질감 표현 방식
	subType:= MODEL__SHADING
	dataPtr:= SHADING_TYPE 에 대한 포인터
		// 텍스쳐를 입힌 상태를 볼 때
		SHADING_TYPE	shadingType = SHADING_TEXTURE;
		meshRef.setValue(TYPE__MODEL, MODEL__SHADING, &shadingType);


뷰: type:= TYPE__VIEW
--
1. 상수
#if 1	// 뷰
typedef enum {
	VIEW__TYPE,		// 어떤 뷰를 사용할 것인지...
				// 데이터 유형: VIEW_MODE
	VIEW__ROTATION,		// 특정 뷰에서는 카메라를 90도 단위로 회전할 수 있다;
				// 데이터 유형: ROTATION_MODE
} VIEW__SUBTYPE;

	// 사용되는 뷰
	typedef enum {
		VIEW_PERSPECTIVE,
		VIEW_TOP,
		VIEW_BOTTOM,
		// 아래의 뷰에서는 회전할 수 있다.
		VIEW_FRONT,
		VIEW_BACK,
		VIEW_LEFT,
		VIEW_RIGHT,
	} VIEW_TYPE_T;
	// VIEW__TYPE 에서 사용되는 구조
	struct VIEW_T {
		bool	orthographic;	// VIEW_PERSPECTIVE 가 아닌 경우,
					// 도면의 삼각법처럼 진짜 Orthographic View 인지 아닌 지를 말해준다;
					// True:= 진짜, False:= 무늬만
		VIEW_TYPE_T	type;

		VIEW_T() : orthographic(false), type(VIEW_PERSPECTIVE) {}
	};

	// 회전 여부는 렌더링할 때 매 프레임마다 참고한다;
	// 회전할 지를 결정이 되었다면 다음으로는 회전 중 상태로 넘어간다:
	//	ROTATE_NONE -> ROTATE_READY -> ROTATE_ON -> ROTATE_NONE
	typedef enum {
		ROTATE_NONE,	// 멈춘 상태
		ROTATE_READY,	// 회전하라고 명령을 내린 상태;
				// setValue 에서는 항상 이 값을 사용해서 회전하도록 한다.
		ROTATE_ON,	// 현재 회전 중인 상태
	} ROTATE_STATE;
	// VIEW__ROTATION 에 사용되는 구조
	struct ROTATION_T {
		ROTATE_STATE	state;
		bool		clockwise;	// 위에서 봤을 회전방향; True:= 정면에서 봤을 때 오른쪽에서 왼쪽으로

		ROTATION_T() : state(ROTATE_NONE), clockwise(true) {}
	};
#endif

2. 함수
	1) 유형: PERSPECTIVE, (ORTHOGRAPHIC) TOP/BOTTOM/FRONT/BACK/RIGHT/LEFT
	subType:= VIEW__TYPE
	dataPtr:= struct VIEW_T 에 대한 포인터
		// PERSPECTIVE (기본)뷰
		VIEW_T	view;
		view.type = VIEW_PERSPECTIVE;
		view.orthographic = false;
		state.setValue(TYPE__VIEW, VIEW__TYPE, &view);
	2) 회전: (ORTHOGRAPHIC) FRONT/BACK/RIGHT/LEFT 에서만 가능
	subType:= VIEW__ROTATION
	dataPtr:= ROTATION_T 에 대한 포인터
		// (위에서 봤을 때) 시계방향으로 회전할 때
		VIEW_T	view;
		const VIEW_TYPE_T&	viewType = view.type;
		state.getValue(TYPE__VIEW, VIEW__TYPE, &view);
		if (
			viewType == VIEW_FRONT || viewType == VIEW_BACK ||
			viewType == VIEW_LEFT || viewType == VIEW_RIGHT
		) {
			ROTATION_T	rotation;
			ROTATE_STATE&	rotationState = rotation.state;
			state.getValue(TYPE__VIEW, VIEW__ROTATION, &rotation);
			if (rotationState == ROTATE_NONE) {
				rotationState = ROTATE_READY;
				rotation.clockwise = true;
				state.setValue(TYPE__VIEW, VIEW__ROTATION, &rotation);
			}
		}
	3) 홈: 카메라 위치를 초기위치로 바꾸고 뷰도 기본 뷰인 PERSPECTIVE 로 돌아간다.
	subType:= VIEW__HOME
	dataPtr:= bool 에 대한 포인터
		// 초기 화면으로 돌아갈 때
		bool	reset = true;
		state.setValue(TYPE__VIEW, VIEW__HOME, &reset);



시뮬레이션 페이지
=================
따로 헤더파일(kSimulation.h)을 만들었다;
그 안에서 예제를 포함한 자세한 설명이 있다.
Pick.cpp 의 KeyboardProc 에 "시뮬레이션"에 관련된 부분에 더 많은 예제가 있다.
