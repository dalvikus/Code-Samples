gmIOCP-0.0.#
	기본 골격

gmIOCP-0.1.#
	클라이언트가 서버에게로 데이터를 보냄
	클라이언트는 쓰기만, 서버는 읽기만 한다.

gmIOCP-0.3.#
	0.3.0
		클라이언트가 보낸 데이터를 서버로부터 되돌려 받는다.
	0.3.1
		이 데이터를 보낸 데이터와 비교 - I
		mf__IOCPSend의 리턴값을 정리
	0.3.2
		mf__flushAll을 구현
	0.3.3
		mf__flush에서 문제 발생 (이 버그때문에 얼마나...)
	0.3.4
		클라이언트->서버, 서버->클라이언트 검증!!!

gmIOCP-0.4.#	시작과 끝
	0.4.0
		mf__notify를 수정하자.
	0.4.1
		끝은 알았으니 뒷처리를 잘하자.

	gmTCPXXX::mf__work
		IOCP_RD:
		--m__NWSARecv;
		IOCP_WR:
		--m__NWSASend;
	gmPseudoTCP::mf__IOCPRecv
		++m__NWSARecv;
	gmPseudoTCP::mf__IOCPSend
		++m__NWSASend;

	gmTCPXXX::mf__peek
		<- Public Queue
	gmPseudoTCP::mf__updateAllQueues
		-> Public Queue

	mf__close
		gmTCPServer: closesocket(m__ListenSocket)
		gmTCPClient: PostQueuedCompletionStatus()
	mf__closeRecv
	mf__closeSend
		--m__numberOfClientsConnected;	// gmTCPServer only!
	mf__disconnect
		--m__numberOfClientsConnected;	// gmTCPServer only!

gmIocp-0.7.#
	Application 에서 사용하는 함수들을 정리
	(INPUT, OUTPUT, Return Value)

	1. TCP 연결을 만들 때 new g__lpTCPXXX
		1-1. 연결에 사용되는 인자(argument)
	2. TCP 연결을 끊을 때 delete g__lpTCPXXX (mf__close)
	3. 메세지를 받을 때
		3-1. 곧 바로 받고자 할 때 mf__GetMessage
		3-2. 데이터를 우선 보고자 할 때 mf__PeekMessage, mf__shift
	4. 메세지를 보낼 때 mf__PostMessage
	5. 특정 연결을 끊을 때
		5-1. 수동적 mf__diconnect
		5-2. 피동적 mf__closeSend
	6. 각 연결에 관계된 큐를 비울 때 mf__flushAll

	gmIocp-0.7.0
		m__dwMS 를 도입해서 상대편이 제일 마지막으로
		메세지를 보낸 시각을 기록한다.

	gmIocp-0.7.1
		WSAECONNRESET(10054) 에러처리 -> 무시하고 지나간다.

	나중에 __SUICIDE__ 를 제거하자. 특히, 서버에서...

gmIocp-0.8.#
	gmIocpServer + gmIocpClient

gmIocp-0.9.#
	1. 중복되는 멤버들을 gmTCPBase 클래스에 넣었다.
	2. 더 이상 Server와 Client의 구별이 없다.
	-> 의미가 있을까?

gmIocp-1.0.#
	실제로 게임서버에 포팅했다.
	IOCP로는 마지막!

----------------------------------------------------------------------------------------
Windows 98, Me는 IOCP를 지원하지 않으므로,
클라이언트의 경우에는 기존의 select 방식 대신에
event방식으로 바꾸기 시작한다.
----------------------------------------------------------------------------------------
gmIocp-1.1.#
	gmIocp-1.1.0
		1. SendMessage추가
		2. 테스트용으로 막아놓았던(gmTCPServer.cpp)
	myPseudoTCP.m__gmPseudoTCPStatus = gmPseudoTCP::gmPseudoTCPStatusAccepted;
//	myPseudoTCP.m__gmPseudoTCPStatus = gmPseudoTCP::gmPseudoTCPStatusEstablished;
		를 다시 서버에 맞게 설정

gmIocp-1.2.#
	1. 서버는 기본적으로 IOCP를 사용하고,
	클라이언트는 사용하지 않는다.
	2. Windows 98/98SE/Me 에서는 CreateThread를 호출할 때
	ThreadID에 대한 인자를 "반드시" 필요로 한다.
	입출력함수(gmUtil.cpp, myPRINT.cpp) 정리

gmIocp-1.3.#
	__SUICIDE__ 의 처리를 한다.

	1. 공용큐가 가득찼을 때의 대처방안은?

	2.
	Base:
		mf__closeRecv() 의 리턴값의 처리
	Server:
		mf__InitializeConnection() 에서...
//		자세한 처리는 mf__InitializeConnection()에서 하는 것으로 한다.
	Client:
		나중에...
