제목: 2003/10/24 gmTCPLib-1.7.3을 내놓으며
작성자: 김광호
순서:
	1. gmTCPLib-1.7.3의 바뀐 내용
	2. gmTCPLib의 사용예
	3. 앞으로 더 보완해야 할 사항들
	참고. NewRohanServer에서 gmTCP를 사용하는 예들


1. gmTCPLib 1.7.3의 내용
새 버젼의 gmTCPLib-1.7.3이 만들어졌다. 이전에 사용하던
gmTCPLib-1.6.3과의 차이에 대해서 설명하겠다.

    1) 서버를 내릴때에 생기는 메모리 access violation에러를 잡았다.
       어떤 상황에서든지 언제든지 서버를 내리기 위하여

		delete gmlpTCPServer;

       라고 할 때, 아무런 문제가 없어야 한다.

    2) 1)에서 사용한 것들이지만 특정연결을 끊을 때에 사용하는 함수들인
       gmPseudoTCP::mf__closeSend, gmPseudoTCP::mf__disconnect가
       많이 수정, 보완되었다.

    3) 아래의 2.에서 자세히 설명하겠지만, gmTCPServer나 gmTCPClient의
       멤버함수들 중에서 많은 함수들이 gmPseudoTCP의 멤버함수로
       바뀌었다.

    4) 이전에는 연결이 되는 순간에 필요한 메모리를 확보하고,
       연결이 끊어지면 그 메모리를 해제했다. gmPseudoTCP클래스가
       바로 그것인데, 이 동적방식대신에 미리 메모리를 확보하는
       정적방식을 택했다. 주된 이유는 1)에서 언급한 access violation
       때문이다. 이유는 알고 있어서 IOCP작업을 처리하는 Worker쓰레드에
       필요한 코드를 넣었지만 그만큼 코드가 복잡했었는 데,
       이 방식을 택함으로써 그런 문제를 해결한 것으로 기대한다.

    5) 클래스가 정리되었다. 정확히는 클래스의 멤버나 멤버함수들의
       access가 정리되었다. Protected와 friend를 써서 이루어졌는데,
       이제는 application에서 접근할 수 있는 public한 멤버나 멤버함수가
       극히 적어졌다. 예를 들어, mf__closeRecv는 application에서
       접근하지 말아야함에도 불구하고, public으로 선언되어서
       application에서 사용되기도 했다.

    6) 서로 다른 쓰레드에서 공유하는 변수들을 접근하기위하여 도입된
       locking이 정리되었다. 먼저 mf__lock을 써서 필요한 변수들을
       접근하고, 다 끝난 후에는 mf__unlock을 써서 다른 쓰레드가
       공유하는 변수들을 접근할 수 있는 기회를 제공해야 한다.
       이는 지금까지 썼던 방식였지만 같은 lock을 두 번이상 걸음로써
       생길 수 있는 deadlock을 방지하고자 좀 더 자세히 조사하였다.

       결론부터 말하면 이전에 썼던 방식을 그대로 사용해도 아무런
       문제가 없다는 것이다. mf__lock, mf__unlock을 할 때에
       Critical Section Object를 사용했는 데, 이 자체가 위와 같은
       deadlock을 방지해준다. 단, mf__lock, mf__unlock의 쌍을
       꼭 맞추어야 한다는 가정하에.

       또한 빈번하게 mf__lock, mf__unlock이 사용되므로 시스템이
       비효율적으로 사용되는 것을 최소화하도록 했다. 불행히도
       이 방식은 적어도 2개이상의 CPU를 가지고 있어야 하고,
       사용하는 OS도 Windows 2000이상은 되어야 한다.

    7) 이전에 메시지를 곧 바로 보낼 때에 사용했던 mf__SendMessage대신에
       좀 더 blocking에 충실한 mf__SendMessageEx함수를 만들었다.
       물론 이 함수의 리턴값을 조사하는 데에 사용되는
       TCPSENDMSGEX__xxx값들도 정의되어있다.

    8) gmTCPServer나 gmTCPClient오브젝트를 만들 때에 사용했던
       gmCONN구조체를 내부적으로 관리한다. 따라서, application에서는
       gmCONN구조체를 automatic variable로 정의해서 임시로
       사용하고 이를 제거해도 문제가 없다.

    9) 내부에서 접근하는 private, protected 멤버나 멤버함수들의 이름이
       바뀌것들이 있고, gmTCP.h에 mf__SendMessageEx함수를 사용하기 위한
       gmSendMessageEx라는 매크로를 만들어 놓았다. 큰 변화는 아니다.
       여기서 다 열거하지 못한 몇가지 들이 더 있을 수도 있으나
       마찬가지로 주목할 만한 것들은 아니다.(아니기를 바란다.)


2. gmTCPLib의 사용예
아래 참고는 NewRohanServer에서 사용하는 gmTCP의 예들을 조사한 것이다.
제대로 사용하고 있는 지는 다음에 정리하기로 하고,
우선은 새로운 버젼에 따라서 달라지는 함수만을 지적하기로 한다.

많은 함수(mf__xxx)들은 gmTCPServer클래스(gmTCPClient클래스도 마찬가지)
의 멤버함수였다. 이 중에서 mf__SendMessage, mf__PostMessage함수만은
gmPseudoTCP클래스의 멤버함수였다. (오른쪽 열에 gmhPseudoTCP.----로 표시)
이번에 버젼업을 하면서 많은 함수들이 gmPseudoTCP클래스의 멤버함수로
바뀌었다.(오른쪽 열에 -> gmhPseudoTCP.xxx로 표시)
구 버젼과의 호환성을 위해서 같은 이름의 gmTCPServer클래스나
gmTCPClient클래스의 멤버함수로 남겨두어서 크게 문제될 것은 없지만
앞으로는 가능하면 gmPseudoTCP클래스의 멤버함수로 사용할 것을 권한다.
오른쪽 열에 아무런 표시가 없는 것은 이전과 똑같다는 것을 뜻한다.

예를 들어, mf__closeSend의 경우에, 이전의 다음 코드가

	gmTCPServer	*lpgmTCPServer;
	gmPseudoTCP	*lpgmPseudoTCP;
	lpgmTCPServer->mf__closeSend(*lpgmPseudoTCP);

이였던 것이 지금은 다음과 같이 바뀌었다.

	gmPseudoTCP	*lpgmPseudoTCP;
	lpgmPseudoTCP->mf__closeSend();


3. 앞으로 더 보완해야 할 사항들

    1) 문제가 발생했을 때, 이를 처리하는 부분들이 많은 곳에서

		__SUICIDE__;

       라고 되어있다. 많은 경우들은 해당하는 연결을 끊으면 충분하지만
       그렇지 않은 경우도 있다. 공용큐에 문제가 생겼을 때가 그런 경우이다.
       다음에는 이 부분을 정리해야할 것이다.

    2) 지금은 모든 메시지가 하나의 공용큐에 들어가지만, 특별한 처리를
       요하는 메시지들이 있는 공용큐를 새로 추가할 수도 있다.


참고. NewRohanServer에서 gmTCP를 사용하는 예들
========================================================================
Disposer.cpp:
--------
CDisposer::SendTCPClientMessage
	mf__SendMessage		gmhPseudoTCP.----

CDisposer::PostTCPClientMessage
	mf__SendMessage		gmhPseudoTCP.----

CDisposer::DisposeClient
	mf__wait
	mf__GetMessage
	mf__printf
	mf__closeSend		-> gmhPseudoTCP.mf__closeSend

CDisposer::GetTCPClientMessage
	mf__GetMessage
	mf__flushAll
	mf__wait

CDisposer::DisposeDBMsg
	mf__setStatusEstablished
				-> gmhPseudoTCP.mf__SetPseudoTCPStatusEstablished
	mf__disconnect		-> gmhPseudoTCP.mf__disconnect


DisposerMiddle.cpp:
--------
CDisposerMiddle::TCPDispose
	mf__wait
	mf__GetMessage
	mf__printf
	mf__setID		-> gmhPseudoTCP.mf__SetID
	mf__closeSend		-> gmhPseudoTCP.mf__closeSend
	mf__disconnect		-> gmhPseudoTCP.mf__disconnect

CDisposerMiddle::SendClientRequestInitDataTCPByPacket
	mf__PostMessage		gmhPseudoTCP.----
	mf__fprintf

CDisposerMiddle::SendRequestInitFail
	mf__PostMessage		gmhPseudoTCP.----
	mf__fprintf

CDisposerMiddle::SetTCPId
	mf__setID		-> gmhPseudoTCP.mf__SetID

CDisposerMiddle::SetTCPId
	mf__TCPGetCharID	-> gmhPseudoTCP.mf__GetID


GameLoop.cpp
--------
CGameLoop::NetworkProcess
	mf__flushAll


Channel.cpp
--------
CChannel::RegisterProtocolData
	mf__PostMessage		gmhPseudoTCP.----
	mf__fprintf


ServerMiddleManager.cpp
--------
CServerMiddleManager::Create
	mf__fprintf
	mf__flushAll

CServerMiddleManager::PostTCPMessage
	mf__PostMessage		gmhPseudoTCP.----
	mf__fprintf
========================================================================
