2005/03/19 - 1.a.0
----------------

	공용큐는 사용하지 않는 것으로 했다.
	따라서 앞으로는 이 부분은 고치지 않을 것이다.
	만약 공용큐를 사용한다면 공용큐를 사용하지 않는 경우와 비교하면서
	고쳐야 할 것이다. 그 기준은 1.a.0부터이다.

1. 유니코드를 지원하기 위하여 많은 부분들을 고쳤다.
유니코드를 지원하기 위하여,

	1) Windows와 관련된 형은 TEXT, LPTSTR/LPCTSTR을 사용했다.
	UNICODE를 정의하면 유니코들를 지원하고,
	정의하지 않으면 그렇지 않다.
	2) C 라이브러리와 관련된 형에는 _TEXT와 TCHAR.H에 정의된 함수들을 사용했다.
	_UNICODE(_가 있다.)를 정의하면 유니코드를 지원하고,
	정의하지 않으면 그렇지 않다.

결론적으로 유니코드를 지원하기 위해서는 UNICODE와 _UNICODE를 모두 정의하고,
그렇지 않으려면 모두를 정의하지 말아야 한다.
또한 프로젝트를 만들 때, 기본적으로 정의되는 _MBCS는 없애야 한다.
_MBCS는 지원하는 문자가 경우에 따라서 한바이트도 되고 두 바이트도 된다.
앞으로는 모두 한 바이트(유니코드가 아니다)이거나
모두 두 바이트(유티코드이다) 많을 고려할 것이기 때문이다.

2. 버퍼오버플로우를 방지하기 위하여 버퍼의 크기가 넘는 데이터가 들어오는 지 확인해야 한다.
이미 myPRINT클래스의 mf__printf, mf__fprintf를 포함한 많은 함수가 strsafe.h에 있는 함수들을 이용하고 있다.
gmBase::mf__GetWSAErrorStringFromCode는 대표적인 예이다.

3. MSGBUF의 구조체에서 lpBuf의 형(Type)을 LPSTR에서 PBYTE로 바꾸었다.
버퍼에는 문자열이 있는 것이 아니라 바이트가 있으므로.
아울러 luBuf, hBytes의 이름을 pbData, cbData로 바꾸었다.

4. 지금까지는 큐에 데이터가 들어왔을 때, Event를 발생하게 했다.
이 이벤트가 받았더라고 메시지가 들어왔다는 보장은 없었다.
따라서 메시지가 단위로 이벤트가 처리되도록 했다.

--------

2005/3/21 - ghkim
IO Completion Port(IOCP)를 이용해서 메시지에 대한 처리를 하였다.
(__gmMESSAGE_IOCP__을 정의하여서)
네트워크를 통해서 데이터를 읽었을 때,
메시지가 있다면(gmQueue::mf__HowManayMessages), 메시지의 갯수와
해당하는 gmPseudoTCP에 대한 정보를 IOCP에 알린다.

#ifdef __gmMESSAGE_IOCP__
	if (!PostQueuedCompletionStatus(
		gmTCPBase::m__hMessageIOCP,
		(DWORD) # of Message,
		&lpgmPseudoTCP,
		(LPOVERLAPPED) ERROR CODE
	)) {
		int	i = *((int *) 0);
	}
#endif	// __gmMESSAGE_IOCP__

나중에는 Callback함수를 이용하는 것이 좋을 것 같다.
