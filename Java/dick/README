Short Cut
=========
Assuming that we are in a directory containing
    dictionary/
    utility/
First, create a building directory called x

compile
-------
    javac -cp x:../../lib/jsoup-1.7.3.jar -d x \
        utility/{Ansi,AnsiText,Derby,Joint,Jsonable,MultiLine}.java \
        utility/{GetOpt,Json,NationalCancerInstituteDerby}.java \
        utility/JsonWalk.java dictionary/{Cambridge,NationalCancerInstitute}.java \
        utility/WordSmartDerby.java \
        {DickWrapper,DickW,DickApplet,Dick}.java

database
--------
1. create database
#   java -cp /disk/jdk1.7.0_60/db/lib/derby.jar:/disk/jdk1.7.0_60/db/lib/derbytools.jar -ea -D"ij.database=jdbc:derby:/home/icentrik/db/Cambridge;create=true" org.apache.derby.tools.ij
2. create tables
    java -cp /disk/jdk1.7.0_60/db/lib/derby.jar:/disk/jdk1.7.0_60/db/lib/derbytools.jar -ea -D"ij.database=jdbc:derby:/home/icentrik/db/Cambridge" org.apache.derby.tools.ij Derby0.sql

    or run as
        java -cp x:/disk/jdk1.7.0_60/db/lib/derby.jar:../../lib/jsoup-1.7.3.jar com.dn2soft.dick.Dick -d dbpath -C


run
---
    java -cp x:/disk/jdk1.7.0_60/db/lib/derby.jar:../../lib/jsoup-1.7.3.jar com.dn2soft.dick.Dick
    java -cp x:/disk/jdk1.7.0_60/db/lib/derby.jar:../../lib/jsoup-1.7.3.jar com.dn2soft.dick.DickW

or after jar like this:
    cd x
    jar cf ../x.jar .

    java -cp x.jar:/disk/jdk1.7.0_60/db/lib/derby.jar:../../lib/jsoup-1.7.3.jar com.dn2soft.dick.Dick

to diable derby.log use "-Dderby.stream.error.file=/dev/null"
to debug, use "-ea" (works only if "-d" is set in javac)

ant
---
    . Use ant (build.xml), however, instead


Files and Dependencies
======================
utility/
--------
Ansi.java
    . basic ansi functions: clear, movement

AnsiText.java
    . colorize text with ansi

Derby.java
    . derby wrapper

GetOpt.java
    . implementation of "getopt" for parsing command-line arguments
    . dependency: AnsiText.java

Joint.java
    . implementation of "join" for array

Jsonable.java
    . interface for building class from json string
    . use it with JsonWalk
    . more type-safe than Json class

Json.java
    . implementation of json: class to json string and vice versa
    . in case of building class from string, becased it is based on Object,
      it may generate "unchecked" warning (to disable this, -Xlint:unchecked)
    . to be more safe in "type", use JsonWalk and Jsonable
    . dependency: Joint.java

JsonWalk.java
    . more safe than Json in building class
    . but used only in android project
    . dependency: Jsonable.java, Json.java, Joint.java, AnsiText.java

MultiLine.java
    . split a line into several lines with given, fixed width

NationalCancerInstituteDerby.java
    . access to NationalCancerInstitute database of "derby" type similar to WordSmartDerby.java,
      but actually not used anywhere
    . dependency: Derby.java

WordSmartDerby.java
    . access to WordSmart database of "derby" type
    . dependency: Derby.java, ../dictionary/Cambridge.java


dictionary/
-----------
Cambridge.java
    . access to http://dictionary.cambridge.org/
    . dependency:
        json-1.7.3.jar
        ../utility/AnsiText.java
        ../utility/Joint.java
        ../utility/Json.java
        ../utility/MultiLine.java

NationalCancerInstitute.java
    . access to http://www.cancer.gov/ to build NationalCancerInstitute database
    . no longer used after building of database
    . dependency:
        json-1.7.3.jar
        ../utility/Json.java

/
-
DickWrapper.java
    . wrapper for Cambridge commonly used in Dick, DickW
    . dependency:
        dictionary/Cambridge.java
        utility/AnsiText.java
        utility/Derby.java
        utility/Json.java
        utility/WordSmartDerby.java

Dick.java
    . main class
    . dependency:
            DickW.java
            DickWrapper.java
            dictionary/Cambridge.java
            utility/GetOpt.java

DickW.java
    . for windows
    . dependency:
            DickWrapper.java
            dictionary/Cambridge.java
            utility/GetOpt.java

DickApplet.java
    . for applet
    . dependency:
            DickW.java


Order of Compilation
====================
Order 1:
    Ansi.java
    AnsiText.java
    Derby.java
    Joint.java
    Jsonable.java
    MultiLine.java

    javac -d x utility/{Ansi,AnsiText,Derby,Joint,Jsonable,MultiLine}.java

Order 2:
    GetOpt.java
    Json.java
    NationalCancerInstituteDerby.java

    javac -cp x -d x utility/{GetOpt,Json,NationalCancerInstituteDerby}.java

Order 3:
    JsonWalk.java
    dictionary/Cambridge.java
    dictionary/NationalCancerInstitute.java

    javac -cp x:../../lib/json-1.7.2.jar -d x utility/JsonWalk.java dictionary/{Cambridge,NationalCancerInstitute}.java

Order 4:
    WordSmartDerby.java

    javac -cp x -d x utility/WordSmartDerby.java

Order 5:
    DickWrapper.java

    javac -cp x -d x DickWrapper.java

Order 6:
    DickW.java

    javac -cp x -d x DickW.java

Order 7:
    DickApplet.java
    Dick.java

    javac -cp x -d x {DickApplet,Dick}.java


Simply type as:
    javac -cp x:../../lib/jsoup-1.7.3.jar -d x \
        utility/{Ansi,AnsiText,Derby,Joint,Jsonable,MultiLine}.java \
        utility/{GetOpt,Json,NationalCancerInstituteDerby}.java \
        utility/JsonWalk.java dictionary/{Cambridge,NationalCancerInstitute}.java \
        utility/WordSmartDerby.java \
        {DickWrapper,DickW,DickApplet,Dick}.java


Run
===
    java -cp x:/disk/jdk1.7.0_60/db/lib/derby.jar:../../lib/jsoup-1.7.3.jar com.dn2soft.dick.Dick


Resources
=========
1. Derby0.sql
-----
CREATE TABLE Link (
    id      INT GENERATED ALWAYS AS IDENTITY,
    href0   VARCHAR(128)    NOT NULL,
    href    VARCHAR(128)    NOT NULL,

    UNIQUE (href0, href)
);
CREATE INDEX IDX_Link_href0 ON Link(href0);
CREATE TABLE NotFound(
    word    VARCHAR(64)     NOT NULL,
    UWORD   VARCHAR(64) GENERATED ALWAYS AS (UPPER(word)),
    refer   VARCHAR(64),    -- NULL: refer not found
    UREFER  VARCHAR(64) GENERATED ALWAYS AS (UPPER(refer)),

    UNIQUE(word)
);
CREATE INDEX IDX_NotFound_UREFER ON NotFound(UREFER);
CREATE TABLE Vocabulary (
    id      INT GENERATED ALWAYS AS IDENTITY,
    word    VARCHAR(64)     NOT NULL,
    UWORD   VARCHAR(64) GENERATED ALWAYS AS (UPPER(word)),
    href0   VARCHAR(128)    NOT NULL,
    wordStr SMALLINT        NOT NULL DEFAULT 0, -- is wordStr a variance of word
                                                --  0: given wordStr is one of words
                                                --  1: otherwise

    UNIQUE(word, href0)
);
CREATE INDEX IDX_Vocabulary_UWORD ON Vocabulary(UWORD);
CREATE TABLE Web (
    href0   VARCHAR(128)    NOT NULL,
    page    VARCHAR(8192)   NOT NULL,   -- Page::getJSONStr()
    more    VARCHAR(4096),              -- More::getJSONStr()
                                        --      NULL:   not retrieved yet
                                        --      "":     none

    UNIQUE(href0)       -- used as INDEX
);
-----
